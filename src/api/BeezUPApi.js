/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountInfo', 'model/AccountPublications', 'model/AccountSynchronizations', 'model/ApiCredentials', 'model/AutoImportConfiguration', 'model/AutomaticTransitionInfos', 'model/BatchOrderOperationResponse', 'model/BeezUPColumnConfiguration', 'model/BeezUPCommonChannelColumnId', 'model/BeezUPCommonEmail', 'model/BeezUPCommonErrorResponseMessage', 'model/BeezUPCommonInfoSummaries', 'model/BeezUPCommonLink2', 'model/BeezUPCommonLink3', 'model/BillingPeriods', 'model/CatalogColumns', 'model/Categories', 'model/ChangeCustomColumnExpressionRequest', 'model/ChangeCustomColumnRequest', 'model/ChangeOrderListRequest', 'model/ChangeOrderRequest', 'model/ChangePasswordRequest', 'model/ChangeUserColumnNameRequest', 'model/ChannelCatalog', 'model/ChannelCatalogCategoryMappings', 'model/ChannelCatalogExportCacheInfoResponse', 'model/ChannelCatalogExportationHistory', 'model/ChannelCatalogList', 'model/ChannelCatalogMarketplaceProperties', 'model/ChannelCatalogMarketplaceSettings', 'model/ChannelCatalogProductByChannelCatalogRequest', 'model/ChannelCatalogProductByChannelCatalogResponse', 'model/ChannelCatalogProductInfo', 'model/ChannelCatalogProductInfoList', 'model/ChannelColumn', 'model/ChannelHeader', 'model/ChannelInfo', 'model/ChannelInfoList', 'model/ChannelRootCategory', 'model/ClearMerchantOrderInfoListRequest', 'model/ColumnMappingList', 'model/CompanyInfo', 'model/ComputeExpressionRequest', 'model/ConfigureAutoImportIntervalRequest', 'model/ConfigureAutomaticTransitionRequest', 'model/ConfigureCatalogColumnCatalogRequest', 'model/Contracts', 'model/CostSettings', 'model/CreateChannelCatalogRequest', 'model/CreateContract', 'model/CreateCustomColumnRequest', 'model/CreateRuleRequest', 'model/CreateStoreRequest', 'model/CreditCardInfo', 'model/CreditCardInfoResponse', 'model/CustomColumns', 'model/CustomerIndex', 'model/DetectedCatalogColumns', 'model/ExclusionFilterOperator', 'model/ExclusionFilters', 'model/ExportOrderListRequest', 'model/FriendEmail', 'model/FunctionalityRightInfo', 'model/GeneralSettings', 'model/GetChannelCatalogProductInfoListRequest', 'model/GetProductsRequest', 'model/ImportationMonitoring', 'model/ImportationReporting', 'model/ImportationTechnicalProgression', 'model/InlineResponse409', 'model/Invoices', 'model/LastManualImportInputConfiguration', 'model/LinksGetStoresLink', 'model/LinksImportationGetImportationMonitoringLink', 'model/LoginRequest', 'model/MapBeezUPColumnRequest', 'model/MapCategoryRequest', 'model/MarketplaceChannelCatalogList', 'model/Offer', 'model/OfferRequest', 'model/OptimiseRequest', 'model/Order', 'model/OrderExportations', 'model/OrderHistory', 'model/OrderIndex', 'model/OrderListFull', 'model/OrderListLight', 'model/OrderListRequest', 'model/PersonalInfo', 'model/Product', 'model/ProductOverrides', 'model/ProductSample', 'model/Products', 'model/ProfilePictureInfo', 'model/ProfilePictureInfoResponse', 'model/PublicChannelIndex', 'model/PublicListOfValuesResponse', 'model/PublicLovIndex', 'model/RegisterRequest', 'model/ReportByCategoryRequest', 'model/ReportByCategoryResponse', 'model/ReportByChannelRequest', 'model/ReportByChannelResponse', 'model/ReportByDayRequest', 'model/ReportByDayResponse', 'model/ReportByProductRequest', 'model/ReportByProductResponse', 'model/ReportFilter', 'model/ReportFilters', 'model/Rule', 'model/RuleExecutionReportings', 'model/RuleList', 'model/SaveReportFilterRequest', 'model/SaveStoreAlertRequest', 'model/ScheduleAutoImportRequest', 'model/SetChannelCatalogMarketplaceSettingsRequest', 'model/SetMerchantOrderInfoListRequest', 'model/SetMerchantOrderInfoRequest', 'model/StandardOffers', 'model/StartManualImportRequest', 'model/StoreAlerts', 'model/StoreHeader', 'model/StoreShares', 'model/StoreTrackingStatus', 'model/Stores', 'model/TerminateContract', 'model/TrackedClicks', 'model/TrackedExternalOrders', 'model/TrackedOrders', 'model/TrackingStatus', 'model/UnmapCategoryRequest', 'model/UpdateRuleRequest', 'model/UpdateStoreRequest', 'model/UpgradeOfferRequired', 'model/UserFriendInfo', 'model/UserListOfValuesResponse', 'model/UserLovIndex'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountInfo'), require('../model/AccountPublications'), require('../model/AccountSynchronizations'), require('../model/ApiCredentials'), require('../model/AutoImportConfiguration'), require('../model/AutomaticTransitionInfos'), require('../model/BatchOrderOperationResponse'), require('../model/BeezUPColumnConfiguration'), require('../model/BeezUPCommonChannelColumnId'), require('../model/BeezUPCommonEmail'), require('../model/BeezUPCommonErrorResponseMessage'), require('../model/BeezUPCommonInfoSummaries'), require('../model/BeezUPCommonLink2'), require('../model/BeezUPCommonLink3'), require('../model/BillingPeriods'), require('../model/CatalogColumns'), require('../model/Categories'), require('../model/ChangeCustomColumnExpressionRequest'), require('../model/ChangeCustomColumnRequest'), require('../model/ChangeOrderListRequest'), require('../model/ChangeOrderRequest'), require('../model/ChangePasswordRequest'), require('../model/ChangeUserColumnNameRequest'), require('../model/ChannelCatalog'), require('../model/ChannelCatalogCategoryMappings'), require('../model/ChannelCatalogExportCacheInfoResponse'), require('../model/ChannelCatalogExportationHistory'), require('../model/ChannelCatalogList'), require('../model/ChannelCatalogMarketplaceProperties'), require('../model/ChannelCatalogMarketplaceSettings'), require('../model/ChannelCatalogProductByChannelCatalogRequest'), require('../model/ChannelCatalogProductByChannelCatalogResponse'), require('../model/ChannelCatalogProductInfo'), require('../model/ChannelCatalogProductInfoList'), require('../model/ChannelColumn'), require('../model/ChannelHeader'), require('../model/ChannelInfo'), require('../model/ChannelInfoList'), require('../model/ChannelRootCategory'), require('../model/ClearMerchantOrderInfoListRequest'), require('../model/ColumnMappingList'), require('../model/CompanyInfo'), require('../model/ComputeExpressionRequest'), require('../model/ConfigureAutoImportIntervalRequest'), require('../model/ConfigureAutomaticTransitionRequest'), require('../model/ConfigureCatalogColumnCatalogRequest'), require('../model/Contracts'), require('../model/CostSettings'), require('../model/CreateChannelCatalogRequest'), require('../model/CreateContract'), require('../model/CreateCustomColumnRequest'), require('../model/CreateRuleRequest'), require('../model/CreateStoreRequest'), require('../model/CreditCardInfo'), require('../model/CreditCardInfoResponse'), require('../model/CustomColumns'), require('../model/CustomerIndex'), require('../model/DetectedCatalogColumns'), require('../model/ExclusionFilterOperator'), require('../model/ExclusionFilters'), require('../model/ExportOrderListRequest'), require('../model/FriendEmail'), require('../model/FunctionalityRightInfo'), require('../model/GeneralSettings'), require('../model/GetChannelCatalogProductInfoListRequest'), require('../model/GetProductsRequest'), require('../model/ImportationMonitoring'), require('../model/ImportationReporting'), require('../model/ImportationTechnicalProgression'), require('../model/InlineResponse409'), require('../model/Invoices'), require('../model/LastManualImportInputConfiguration'), require('../model/LinksGetStoresLink'), require('../model/LinksImportationGetImportationMonitoringLink'), require('../model/LoginRequest'), require('../model/MapBeezUPColumnRequest'), require('../model/MapCategoryRequest'), require('../model/MarketplaceChannelCatalogList'), require('../model/Offer'), require('../model/OfferRequest'), require('../model/OptimiseRequest'), require('../model/Order'), require('../model/OrderExportations'), require('../model/OrderHistory'), require('../model/OrderIndex'), require('../model/OrderListFull'), require('../model/OrderListLight'), require('../model/OrderListRequest'), require('../model/PersonalInfo'), require('../model/Product'), require('../model/ProductOverrides'), require('../model/ProductSample'), require('../model/Products'), require('../model/ProfilePictureInfo'), require('../model/ProfilePictureInfoResponse'), require('../model/PublicChannelIndex'), require('../model/PublicListOfValuesResponse'), require('../model/PublicLovIndex'), require('../model/RegisterRequest'), require('../model/ReportByCategoryRequest'), require('../model/ReportByCategoryResponse'), require('../model/ReportByChannelRequest'), require('../model/ReportByChannelResponse'), require('../model/ReportByDayRequest'), require('../model/ReportByDayResponse'), require('../model/ReportByProductRequest'), require('../model/ReportByProductResponse'), require('../model/ReportFilter'), require('../model/ReportFilters'), require('../model/Rule'), require('../model/RuleExecutionReportings'), require('../model/RuleList'), require('../model/SaveReportFilterRequest'), require('../model/SaveStoreAlertRequest'), require('../model/ScheduleAutoImportRequest'), require('../model/SetChannelCatalogMarketplaceSettingsRequest'), require('../model/SetMerchantOrderInfoListRequest'), require('../model/SetMerchantOrderInfoRequest'), require('../model/StandardOffers'), require('../model/StartManualImportRequest'), require('../model/StoreAlerts'), require('../model/StoreHeader'), require('../model/StoreShares'), require('../model/StoreTrackingStatus'), require('../model/Stores'), require('../model/TerminateContract'), require('../model/TrackedClicks'), require('../model/TrackedExternalOrders'), require('../model/TrackedOrders'), require('../model/TrackingStatus'), require('../model/UnmapCategoryRequest'), require('../model/UpdateRuleRequest'), require('../model/UpdateStoreRequest'), require('../model/UpgradeOfferRequired'), require('../model/UserFriendInfo'), require('../model/UserListOfValuesResponse'), require('../model/UserLovIndex'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.BeezUPApi = factory(root.BeezUpApi.ApiClient, root.BeezUpApi.AccountInfo, root.BeezUpApi.AccountPublications, root.BeezUpApi.AccountSynchronizations, root.BeezUpApi.ApiCredentials, root.BeezUpApi.AutoImportConfiguration, root.BeezUpApi.AutomaticTransitionInfos, root.BeezUpApi.BatchOrderOperationResponse, root.BeezUpApi.BeezUPColumnConfiguration, root.BeezUpApi.BeezUPCommonChannelColumnId, root.BeezUpApi.BeezUPCommonEmail, root.BeezUpApi.BeezUPCommonErrorResponseMessage, root.BeezUpApi.BeezUPCommonInfoSummaries, root.BeezUpApi.BeezUPCommonLink2, root.BeezUpApi.BeezUPCommonLink3, root.BeezUpApi.BillingPeriods, root.BeezUpApi.CatalogColumns, root.BeezUpApi.Categories, root.BeezUpApi.ChangeCustomColumnExpressionRequest, root.BeezUpApi.ChangeCustomColumnRequest, root.BeezUpApi.ChangeOrderListRequest, root.BeezUpApi.ChangeOrderRequest, root.BeezUpApi.ChangePasswordRequest, root.BeezUpApi.ChangeUserColumnNameRequest, root.BeezUpApi.ChannelCatalog, root.BeezUpApi.ChannelCatalogCategoryMappings, root.BeezUpApi.ChannelCatalogExportCacheInfoResponse, root.BeezUpApi.ChannelCatalogExportationHistory, root.BeezUpApi.ChannelCatalogList, root.BeezUpApi.ChannelCatalogMarketplaceProperties, root.BeezUpApi.ChannelCatalogMarketplaceSettings, root.BeezUpApi.ChannelCatalogProductByChannelCatalogRequest, root.BeezUpApi.ChannelCatalogProductByChannelCatalogResponse, root.BeezUpApi.ChannelCatalogProductInfo, root.BeezUpApi.ChannelCatalogProductInfoList, root.BeezUpApi.ChannelColumn, root.BeezUpApi.ChannelHeader, root.BeezUpApi.ChannelInfo, root.BeezUpApi.ChannelInfoList, root.BeezUpApi.ChannelRootCategory, root.BeezUpApi.ClearMerchantOrderInfoListRequest, root.BeezUpApi.ColumnMappingList, root.BeezUpApi.CompanyInfo, root.BeezUpApi.ComputeExpressionRequest, root.BeezUpApi.ConfigureAutoImportIntervalRequest, root.BeezUpApi.ConfigureAutomaticTransitionRequest, root.BeezUpApi.ConfigureCatalogColumnCatalogRequest, root.BeezUpApi.Contracts, root.BeezUpApi.CostSettings, root.BeezUpApi.CreateChannelCatalogRequest, root.BeezUpApi.CreateContract, root.BeezUpApi.CreateCustomColumnRequest, root.BeezUpApi.CreateRuleRequest, root.BeezUpApi.CreateStoreRequest, root.BeezUpApi.CreditCardInfo, root.BeezUpApi.CreditCardInfoResponse, root.BeezUpApi.CustomColumns, root.BeezUpApi.CustomerIndex, root.BeezUpApi.DetectedCatalogColumns, root.BeezUpApi.ExclusionFilterOperator, root.BeezUpApi.ExclusionFilters, root.BeezUpApi.ExportOrderListRequest, root.BeezUpApi.FriendEmail, root.BeezUpApi.FunctionalityRightInfo, root.BeezUpApi.GeneralSettings, root.BeezUpApi.GetChannelCatalogProductInfoListRequest, root.BeezUpApi.GetProductsRequest, root.BeezUpApi.ImportationMonitoring, root.BeezUpApi.ImportationReporting, root.BeezUpApi.ImportationTechnicalProgression, root.BeezUpApi.InlineResponse409, root.BeezUpApi.Invoices, root.BeezUpApi.LastManualImportInputConfiguration, root.BeezUpApi.LinksGetStoresLink, root.BeezUpApi.LinksImportationGetImportationMonitoringLink, root.BeezUpApi.LoginRequest, root.BeezUpApi.MapBeezUPColumnRequest, root.BeezUpApi.MapCategoryRequest, root.BeezUpApi.MarketplaceChannelCatalogList, root.BeezUpApi.Offer, root.BeezUpApi.OfferRequest, root.BeezUpApi.OptimiseRequest, root.BeezUpApi.Order, root.BeezUpApi.OrderExportations, root.BeezUpApi.OrderHistory, root.BeezUpApi.OrderIndex, root.BeezUpApi.OrderListFull, root.BeezUpApi.OrderListLight, root.BeezUpApi.OrderListRequest, root.BeezUpApi.PersonalInfo, root.BeezUpApi.Product, root.BeezUpApi.ProductOverrides, root.BeezUpApi.ProductSample, root.BeezUpApi.Products, root.BeezUpApi.ProfilePictureInfo, root.BeezUpApi.ProfilePictureInfoResponse, root.BeezUpApi.PublicChannelIndex, root.BeezUpApi.PublicListOfValuesResponse, root.BeezUpApi.PublicLovIndex, root.BeezUpApi.RegisterRequest, root.BeezUpApi.ReportByCategoryRequest, root.BeezUpApi.ReportByCategoryResponse, root.BeezUpApi.ReportByChannelRequest, root.BeezUpApi.ReportByChannelResponse, root.BeezUpApi.ReportByDayRequest, root.BeezUpApi.ReportByDayResponse, root.BeezUpApi.ReportByProductRequest, root.BeezUpApi.ReportByProductResponse, root.BeezUpApi.ReportFilter, root.BeezUpApi.ReportFilters, root.BeezUpApi.Rule, root.BeezUpApi.RuleExecutionReportings, root.BeezUpApi.RuleList, root.BeezUpApi.SaveReportFilterRequest, root.BeezUpApi.SaveStoreAlertRequest, root.BeezUpApi.ScheduleAutoImportRequest, root.BeezUpApi.SetChannelCatalogMarketplaceSettingsRequest, root.BeezUpApi.SetMerchantOrderInfoListRequest, root.BeezUpApi.SetMerchantOrderInfoRequest, root.BeezUpApi.StandardOffers, root.BeezUpApi.StartManualImportRequest, root.BeezUpApi.StoreAlerts, root.BeezUpApi.StoreHeader, root.BeezUpApi.StoreShares, root.BeezUpApi.StoreTrackingStatus, root.BeezUpApi.Stores, root.BeezUpApi.TerminateContract, root.BeezUpApi.TrackedClicks, root.BeezUpApi.TrackedExternalOrders, root.BeezUpApi.TrackedOrders, root.BeezUpApi.TrackingStatus, root.BeezUpApi.UnmapCategoryRequest, root.BeezUpApi.UpdateRuleRequest, root.BeezUpApi.UpdateStoreRequest, root.BeezUpApi.UpgradeOfferRequired, root.BeezUpApi.UserFriendInfo, root.BeezUpApi.UserListOfValuesResponse, root.BeezUpApi.UserLovIndex);
  }
}(this, function(ApiClient, AccountInfo, AccountPublications, AccountSynchronizations, ApiCredentials, AutoImportConfiguration, AutomaticTransitionInfos, BatchOrderOperationResponse, BeezUPColumnConfiguration, BeezUPCommonChannelColumnId, BeezUPCommonEmail, BeezUPCommonErrorResponseMessage, BeezUPCommonInfoSummaries, BeezUPCommonLink2, BeezUPCommonLink3, BillingPeriods, CatalogColumns, Categories, ChangeCustomColumnExpressionRequest, ChangeCustomColumnRequest, ChangeOrderListRequest, ChangeOrderRequest, ChangePasswordRequest, ChangeUserColumnNameRequest, ChannelCatalog, ChannelCatalogCategoryMappings, ChannelCatalogExportCacheInfoResponse, ChannelCatalogExportationHistory, ChannelCatalogList, ChannelCatalogMarketplaceProperties, ChannelCatalogMarketplaceSettings, ChannelCatalogProductByChannelCatalogRequest, ChannelCatalogProductByChannelCatalogResponse, ChannelCatalogProductInfo, ChannelCatalogProductInfoList, ChannelColumn, ChannelHeader, ChannelInfo, ChannelInfoList, ChannelRootCategory, ClearMerchantOrderInfoListRequest, ColumnMappingList, CompanyInfo, ComputeExpressionRequest, ConfigureAutoImportIntervalRequest, ConfigureAutomaticTransitionRequest, ConfigureCatalogColumnCatalogRequest, Contracts, CostSettings, CreateChannelCatalogRequest, CreateContract, CreateCustomColumnRequest, CreateRuleRequest, CreateStoreRequest, CreditCardInfo, CreditCardInfoResponse, CustomColumns, CustomerIndex, DetectedCatalogColumns, ExclusionFilterOperator, ExclusionFilters, ExportOrderListRequest, FriendEmail, FunctionalityRightInfo, GeneralSettings, GetChannelCatalogProductInfoListRequest, GetProductsRequest, ImportationMonitoring, ImportationReporting, ImportationTechnicalProgression, InlineResponse409, Invoices, LastManualImportInputConfiguration, LinksGetStoresLink, LinksImportationGetImportationMonitoringLink, LoginRequest, MapBeezUPColumnRequest, MapCategoryRequest, MarketplaceChannelCatalogList, Offer, OfferRequest, OptimiseRequest, Order, OrderExportations, OrderHistory, OrderIndex, OrderListFull, OrderListLight, OrderListRequest, PersonalInfo, Product, ProductOverrides, ProductSample, Products, ProfilePictureInfo, ProfilePictureInfoResponse, PublicChannelIndex, PublicListOfValuesResponse, PublicLovIndex, RegisterRequest, ReportByCategoryRequest, ReportByCategoryResponse, ReportByChannelRequest, ReportByChannelResponse, ReportByDayRequest, ReportByDayResponse, ReportByProductRequest, ReportByProductResponse, ReportFilter, ReportFilters, Rule, RuleExecutionReportings, RuleList, SaveReportFilterRequest, SaveStoreAlertRequest, ScheduleAutoImportRequest, SetChannelCatalogMarketplaceSettingsRequest, SetMerchantOrderInfoListRequest, SetMerchantOrderInfoRequest, StandardOffers, StartManualImportRequest, StoreAlerts, StoreHeader, StoreShares, StoreTrackingStatus, Stores, TerminateContract, TrackedClicks, TrackedExternalOrders, TrackedOrders, TrackingStatus, UnmapCategoryRequest, UpdateRuleRequest, UpdateStoreRequest, UpgradeOfferRequired, UserFriendInfo, UserListOfValuesResponse, UserLovIndex) {
  'use strict';

  /**
   * BeezUP service.
   * @module api/BeezUPApi
   * @version 2.0
   */

  /**
   * Constructs a new BeezUPApi. 
   * @alias module:api/BeezUPApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateUserAccount operation.
     * @callback module:api/BeezUPApi~activateUserAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate the user account
     * @param {String} emailActivationId The email activation id received by email.
     * @param {module:api/BeezUPApi~activateUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.activateUserAccount = function(emailActivationId, callback) {
      var postBody = emailActivationId;

      // verify the required parameter 'emailActivationId' is set
      if (emailActivationId == undefined || emailActivationId == null) {
        throw new Error("Missing the required parameter 'emailActivationId' when calling activateUserAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoConfigureAutoImportInterval operation.
     * @callback module:api/BeezUPApi~autoConfigureAutoImportIntervalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure Auto Import Interval
     * @param {String} storeId Your store identifier
     * @param {module:model/ConfigureAutoImportIntervalRequest} request 
     * @param {module:api/BeezUPApi~autoConfigureAutoImportIntervalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoConfigureAutoImportInterval = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoConfigureAutoImportInterval");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling autoConfigureAutoImportInterval");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport/scheduling/interval', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoDeleteAutoImport operation.
     * @callback module:api/BeezUPApi~autoDeleteAutoImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Auto Import
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~autoDeleteAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoDeleteAutoImport = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoDeleteAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoGetAutoImportConfiguration operation.
     * @callback module:api/BeezUPApi~autoGetAutoImportConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoImportConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the auto import configuration
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~autoGetAutoImportConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoImportConfiguration}
     */
    this.autoGetAutoImportConfiguration = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoGetAutoImportConfiguration");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AutoImportConfiguration;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoPauseAutoImport operation.
     * @callback module:api/BeezUPApi~autoPauseAutoImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause Auto Import
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~autoPauseAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoPauseAutoImport = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoPauseAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoResumeAutoImport operation.
     * @callback module:api/BeezUPApi~autoResumeAutoImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume Auto Import
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~autoResumeAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoResumeAutoImport = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoResumeAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoScheduleAutoImport operation.
     * @callback module:api/BeezUPApi~autoScheduleAutoImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure Auto Import Schedules
     * @param {String} storeId Your store identifier
     * @param {module:model/ScheduleAutoImportRequest} request 
     * @param {module:api/BeezUPApi~autoScheduleAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoScheduleAutoImport = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoScheduleAutoImport");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling autoScheduleAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport/scheduling/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoStartAutoImport operation.
     * @callback module:api/BeezUPApi~autoStartAutoImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinksImportationGetImportationMonitoringLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Auto Import Manually
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~autoStartAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinksImportationGetImportationMonitoringLink}
     */
    this.autoStartAutoImport = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling autoStartAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinksImportationGetImportationMonitoringLink;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogChangeCatalogColumnUserName operation.
     * @callback module:api/BeezUPApi~catalogChangeCatalogColumnUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Catalog Column User Name
     * @param {String} storeId Your store identifier
     * @param {String} columnId The catalog column identifier
     * @param {module:model/ChangeUserColumnNameRequest} request 
     * @param {module:api/BeezUPApi~catalogChangeCatalogColumnUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.catalogChangeCatalogColumnUserName = function(storeId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCatalogColumnUserName");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCatalogColumnUserName");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling catalogChangeCatalogColumnUserName");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/catalogColumns/{columnId}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogChangeCustomColumnExpression operation.
     * @callback module:api/BeezUPApi~catalogChangeCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change custom column expression
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeCustomColumnExpressionRequest} request 
     * @param {module:api/BeezUPApi~catalogChangeCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.catalogChangeCustomColumnExpression = function(storeId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnExpression");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnExpression");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling catalogChangeCustomColumnExpression");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/{columnId}/expression', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogChangeCustomColumnUserName operation.
     * @callback module:api/BeezUPApi~catalogChangeCustomColumnUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Custom Column User Name
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeUserColumnNameRequest} request 
     * @param {module:api/BeezUPApi~catalogChangeCustomColumnUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.catalogChangeCustomColumnUserName = function(storeId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogChangeCustomColumnUserName");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogChangeCustomColumnUserName");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling catalogChangeCustomColumnUserName");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/{columnId}/rename', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogComputeExpression operation.
     * @callback module:api/BeezUPApi~catalogComputeExpressionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute the expression for this catalog.
     * @param {String} storeId Your store identifier
     * @param {module:model/ComputeExpressionRequest} request 
     * @param {module:api/BeezUPApi~catalogComputeExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.catalogComputeExpression = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogComputeExpression");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling catalogComputeExpression");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/computeExpression', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogDeleteCustomColumn operation.
     * @callback module:api/BeezUPApi~catalogDeleteCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete custom column
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~catalogDeleteCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.catalogDeleteCustomColumn = function(storeId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogDeleteCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogDeleteCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/{columnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetBeezUPColumns operation.
     * @callback module:api/BeezUPApi~catalogGetBeezUPColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BeezUPColumnConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the BeezUP columns
     * Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
     * @param {module:api/BeezUPApi~catalogGetBeezUPColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BeezUPColumnConfiguration>}
     */
    this.catalogGetBeezUPColumns = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BeezUPColumnConfiguration];

      return this.apiClient.callApi(
        '/user/catalogs/beezupColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCatalogColumns operation.
     * @callback module:api/BeezUPApi~catalogGetCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogColumns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get catalog column list
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~catalogGetCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogColumns}
     */
    this.catalogGetCatalogColumns = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCatalogColumns");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CatalogColumns;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/catalogColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCategories operation.
     * @callback module:api/BeezUPApi~catalogGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categories} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get category list
     * @param {String} storeId Your store identifier
     * @param {Array.<String>} acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
     * @param {module:api/BeezUPApi~catalogGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categories}
     */
    this.catalogGetCategories = function(storeId, acceptEncoding, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCategories");
      }

      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding == undefined || acceptEncoding == null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling catalogGetCategories");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Categories;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCustomColumnExpression operation.
     * @callback module:api/BeezUPApi~catalogGetCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the encrypted custom column expression
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~catalogGetCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.catalogGetCustomColumnExpression = function(storeId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCustomColumnExpression");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogGetCustomColumnExpression");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/{columnId}/expression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetCustomColumns operation.
     * @callback module:api/BeezUPApi~catalogGetCustomColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomColumns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom column list
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~catalogGetCustomColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomColumns}
     */
    this.catalogGetCustomColumns = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetCustomColumns");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomColumns;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProduct operation.
     * @callback module:api/BeezUPApi~catalogGetProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Product} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product
     * @param {String} storeId Your store identifier
     * @param {String} productId The product identifier you want to get
     * @param {module:api/BeezUPApi~catalogGetProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Product}
     */
    this.catalogGetProduct = function(storeId, productId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling catalogGetProduct");
      }


      var pathParams = {
        'storeId': storeId,
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Product;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetProducts operation.
     * @callback module:api/BeezUPApi~catalogGetProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product list
     * @param {String} storeId Your store identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/GetProductsRequest} opts.request 
     * @param {module:api/BeezUPApi~catalogGetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products}
     */
    this.catalogGetProducts = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetProducts");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Products;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogGetRandomProducts operation.
     * @callback module:api/BeezUPApi~catalogGetRandomProductsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Products} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get random product list
     * @param {String} storeId Your store identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The count of random product you want to get (default to 100)
     * @param {module:api/BeezUPApi~catalogGetRandomProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Products}
     */
    this.catalogGetRandomProducts = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogGetRandomProducts");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Products;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/products/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the catalogSaveCustomColumn operation.
     * @callback module:api/BeezUPApi~catalogSaveCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace a custom column
     * @param {String} storeId Your store identifier
     * @param {String} columnId The custom column identifier
     * @param {module:model/CreateCustomColumnRequest} request 
     * @param {module:api/BeezUPApi~catalogSaveCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.catalogSaveCustomColumn = function(storeId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling catalogSaveCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling catalogSaveCustomColumn");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling catalogSaveCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/customColumns/{columnId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeOrder operation.
     * @callback module:api/BeezUPApi~changeOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change your marketplace Order Information (accept, ship, etc.)
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {String} changeOrderType The Order change type
     * @param {String} userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
     * @param {module:model/ChangeOrderRequest} request 
     * @param {String} ifMatch ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
     * @param {module:api/BeezUPApi~changeOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changeOrder = function(marketplaceTechnicalCode, accountId, beezUPOrderId, changeOrderType, userName, request, ifMatch, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling changeOrder");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling changeOrder");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling changeOrder");
      }

      // verify the required parameter 'changeOrderType' is set
      if (changeOrderType == undefined || changeOrderType == null) {
        throw new Error("Missing the required parameter 'changeOrderType' when calling changeOrder");
      }

      // verify the required parameter 'userName' is set
      if (userName == undefined || userName == null) {
        throw new Error("Missing the required parameter 'userName' when calling changeOrder");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling changeOrder");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch == undefined || ifMatch == null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling changeOrder");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId,
        'changeOrderType': changeOrderType
      };
      var queryParams = {
        'userName': userName,
        'testMode': opts['testMode']
      };
      var headerParams = {
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changeOrderList operation.
     * @callback module:api/BeezUPApi~changeOrderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchOrderOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param {String} changeOrderType The Order change type
     * @param {String} userName Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
     * @param {module:model/ChangeOrderListRequest} request 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.testMode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
     * @param {module:api/BeezUPApi~changeOrderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchOrderOperationResponse}
     */
    this.changeOrderList = function(changeOrderType, userName, request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'changeOrderType' is set
      if (changeOrderType == undefined || changeOrderType == null) {
        throw new Error("Missing the required parameter 'changeOrderType' when calling changeOrderList");
      }

      // verify the required parameter 'userName' is set
      if (userName == undefined || userName == null) {
        throw new Error("Missing the required parameter 'userName' when calling changeOrderList");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling changeOrderList");
      }


      var pathParams = {
        'changeOrderType': changeOrderType
      };
      var queryParams = {
        'userName': userName,
        'testMode': opts['testMode']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchOrderOperationResponse;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/batches/changeOrders/{changeOrderType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/BeezUPApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user password
     * @param {module:model/ChangePasswordRequest} request 
     * @param {module:api/BeezUPApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePassword = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling changePassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/changePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clearMerchantOrderInfo operation.
     * @callback module:api/BeezUPApi~clearMerchantOrderInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear an Order&#39;s merchant information
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:api/BeezUPApi~clearMerchantOrderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.clearMerchantOrderInfo = function(marketplaceTechnicalCode, accountId, beezUPOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling clearMerchantOrderInfo");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling clearMerchantOrderInfo");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling clearMerchantOrderInfo");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the clearMerchantOrderInfoList operation.
     * @callback module:api/BeezUPApi~clearMerchantOrderInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchOrderOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of operations to clear an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param {module:model/ClearMerchantOrderInfoListRequest} request 
     * @param {module:api/BeezUPApi~clearMerchantOrderInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchOrderOperationResponse}
     */
    this.clearMerchantOrderInfoList = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling clearMerchantOrderInfoList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchOrderOperationResponse;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/batches/clearMerchantOrderInfos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureAutomaticTransitions operation.
     * @callback module:api/BeezUPApi~configureAutomaticTransitionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure new or existing automatic Order status transition
     * @param {module:model/ConfigureAutomaticTransitionRequest} request 
     * @param {module:api/BeezUPApi~configureAutomaticTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configureAutomaticTransitions = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling configureAutomaticTransitions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/automaticTransitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureChannelCatalogCostSettings operation.
     * @callback module:api/BeezUPApi~configureChannelCatalogCostSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a channel catalog
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/CostSettings} request 
     * @param {module:api/BeezUPApi~configureChannelCatalogCostSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configureChannelCatalogCostSettings = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogCostSettings");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling configureChannelCatalogCostSettings");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/settings/cost', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureChannelCatalogExclusionFilters operation.
     * @callback module:api/BeezUPApi~configureChannelCatalogExclusionFiltersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure channel catalog exclusion filters
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/ExclusionFilters} request 
     * @param {module:api/BeezUPApi~configureChannelCatalogExclusionFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configureChannelCatalogExclusionFilters = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogExclusionFilters");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling configureChannelCatalogExclusionFilters");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/exclusionFilters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureChannelCatalogGeneralSettings operation.
     * @callback module:api/BeezUPApi~configureChannelCatalogGeneralSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a channel catalog
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/GeneralSettings} request 
     * @param {module:api/BeezUPApi~configureChannelCatalogGeneralSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.configureChannelCatalogGeneralSettings = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling configureChannelCatalogGeneralSettings");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling configureChannelCatalogGeneralSettings");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/settings/general', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelCatalog operation.
     * @callback module:api/BeezUPApi~createChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BeezUPCommonLink2>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new channel catalog
     * @param {module:model/CreateChannelCatalogRequest} request 
     * @param {module:api/BeezUPApi~createChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BeezUPCommonLink2>}
     */
    this.createChannelCatalog = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling createChannelCatalog");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BeezUPCommonLink2];

      return this.apiClient.callApi(
        '/user/channelCatalogs/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createContract operation.
     * @callback module:api/BeezUPApi~createContractCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BeezUPCommonInfoSummaries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contract
     * Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
     * @param {module:model/CreateContract} request 
     * @param {module:api/BeezUPApi~createContractCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BeezUPCommonInfoSummaries}
     */
    this.createContract = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling createContract");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BeezUPCommonInfoSummaries;

      return this.apiClient.callApi(
        '/user/customer/contracts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRule operation.
     * @callback module:api/BeezUPApi~createRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rule creation
     * @param {String} storeId Your store identifier
     * @param {module:model/CreateRuleRequest} request 
     * @param {module:api/BeezUPApi~createRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRule = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling createRule");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling createRule");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createStore operation.
     * @callback module:api/BeezUPApi~createStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinksGetStoresLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new store
     * @param {module:model/CreateStoreRequest} request 
     * @param {module:api/BeezUPApi~createStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinksGetStoresLink}
     */
    this.createStore = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling createStore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinksGetStoresLink;

      return this.apiClient.callApi(
        '/user/customer/stores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelCatalog operation.
     * @callback module:api/BeezUPApi~deleteChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the channel catalog
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~deleteChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChannelCatalog = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling deleteChannelCatalog");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelCatalogExportationCache operation.
     * @callback module:api/BeezUPApi~deleteChannelCatalogExportationCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the exportation cache
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~deleteChannelCatalogExportationCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChannelCatalogExportationCache = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling deleteChannelCatalogExportationCache");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/exportations/cache', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelCatalogProductValueOverride operation.
     * @callback module:api/BeezUPApi~deleteChannelCatalogProductValueOverrideCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific channel catalog product value override
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {String} productId The product identifier
     * @param {String} channelColumnId The channel column identifier
     * @param {module:api/BeezUPApi~deleteChannelCatalogProductValueOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChannelCatalogProductValueOverride = function(channelCatalogId, productId, channelColumnId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling deleteChannelCatalogProductValueOverride");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteChannelCatalogProductValueOverride");
      }

      // verify the required parameter 'channelColumnId' is set
      if (channelColumnId == undefined || channelColumnId == null) {
        throw new Error("Missing the required parameter 'channelColumnId' when calling deleteChannelCatalogProductValueOverride");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId,
        'productId': productId,
        'channelColumnId': channelColumnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNextContract operation.
     * @callback module:api/BeezUPApi~deleteNextContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete your next contract
     * @param {module:api/BeezUPApi~deleteNextContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNextContract = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/contracts/next', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReportFilter operation.
     * @callback module:api/BeezUPApi~deleteReportFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the report filter
     * @param {String} storeId Your store identifier
     * @param {String} reportFilterId Your report filter identifier
     * @param {module:api/BeezUPApi~deleteReportFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReportFilter = function(storeId, reportFilterId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteReportFilter");
      }

      // verify the required parameter 'reportFilterId' is set
      if (reportFilterId == undefined || reportFilterId == null) {
        throw new Error("Missing the required parameter 'reportFilterId' when calling deleteReportFilter");
      }


      var pathParams = {
        'storeId': storeId,
        'reportFilterId': reportFilterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/filters/{reportFilterId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback module:api/BeezUPApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteShare operation.
     * @callback module:api/BeezUPApi~deleteShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a share to another user
     * @param {String} storeId Your store identifier
     * @param {String} userId The friend user id
     * @param {module:api/BeezUPApi~deleteShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteShare = function(storeId, userId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteShare");
      }

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteShare");
      }


      var pathParams = {
        'storeId': storeId,
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/shares/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStore operation.
     * @callback module:api/BeezUPApi~deleteStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a store
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~deleteStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling deleteStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disableChannelCatalog operation.
     * @callback module:api/BeezUPApi~disableChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a channel catalog
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~disableChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disableChannelCatalog = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling disableChannelCatalog");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disableChannelCatalogProduct operation.
     * @callback module:api/BeezUPApi~disableChannelCatalogProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {String} productId The product identifier
     * @param {module:api/BeezUPApi~disableChannelCatalogProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disableChannelCatalogProduct = function(channelCatalogId, productId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling disableChannelCatalogProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling disableChannelCatalogProduct");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId,
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disableRule operation.
     * @callback module:api/BeezUPApi~disableRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~disableRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disableRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling disableRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling disableRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableChannelCatalog operation.
     * @callback module:api/BeezUPApi~enableChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a channel catalog
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~enableChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enableChannelCatalog = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling enableChannelCatalog");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableRule operation.
     * @callback module:api/BeezUPApi~enableRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~enableRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enableRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling enableRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling enableRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportOrders operation.
     * @callback module:api/BeezUPApi~exportOrdersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a new Order report exportation to be generated
     * A new file will be generated containing a summary of all the Orders matching the requested filter settings.
     * @param {module:model/ExportOrderListRequest} request 
     * @param {module:api/BeezUPApi~exportOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.exportOrders = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling exportOrders");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/exportations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportStoreReportByCategory operation.
     * @callback module:api/BeezUPApi~exportStoreReportByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BeezUPCommonLink3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the report by category
     * Export the report by category
     * @param {String} storeId Your store identifier
     * @param {module:model/String} format 
     * @param {module:model/ReportByCategoryRequest} request 
     * @param {module:api/BeezUPApi~exportStoreReportByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BeezUPCommonLink3}
     */
    this.exportStoreReportByCategory = function(storeId, format, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling exportStoreReportByCategory");
      }

      // verify the required parameter 'format' is set
      if (format == undefined || format == null) {
        throw new Error("Missing the required parameter 'format' when calling exportStoreReportByCategory");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling exportStoreReportByCategory");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'format': format
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BeezUPCommonLink3;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/bycategory/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportStoreReportByChannel operation.
     * @callback module:api/BeezUPApi~exportStoreReportByChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BeezUPCommonLink3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the report by channel
     * Export the report by channel
     * @param {String} storeId Your store identifier
     * @param {module:model/String} format 
     * @param {module:model/ReportByChannelRequest} request 
     * @param {module:api/BeezUPApi~exportStoreReportByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BeezUPCommonLink3}
     */
    this.exportStoreReportByChannel = function(storeId, format, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling exportStoreReportByChannel");
      }

      // verify the required parameter 'format' is set
      if (format == undefined || format == null) {
        throw new Error("Missing the required parameter 'format' when calling exportStoreReportByChannel");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling exportStoreReportByChannel");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'format': format
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BeezUPCommonLink3;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/bychannel/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportStoreReportByProduct operation.
     * @callback module:api/BeezUPApi~exportStoreReportByProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BeezUPCommonLink3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export the report by product
     * Export the report by product
     * @param {String} storeId Your store identifier
     * @param {module:model/String} format 
     * @param {module:model/ReportByProductRequest} request 
     * @param {module:api/BeezUPApi~exportStoreReportByProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BeezUPCommonLink3}
     */
    this.exportStoreReportByProduct = function(storeId, format, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling exportStoreReportByProduct");
      }

      // verify the required parameter 'format' is set
      if (format == undefined || format == null) {
        throw new Error("Missing the required parameter 'format' when calling exportStoreReportByProduct");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling exportStoreReportByProduct");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'format': format
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BeezUPCommonLink3;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/byproduct/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomaticTransitions operation.
     * @callback module:api/BeezUPApi~getAutomaticTransitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomaticTransitionInfos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of configured automatic Order status transitions
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getAutomaticTransitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomaticTransitionInfos}
     */
    this.getAutomaticTransitions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AutomaticTransitionInfos;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/automaticTransitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableChannels operation.
     * @callback module:api/BeezUPApi~getAvailableChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelHeader>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available channel for this store
     * @param {String} storeId The store identifier
     * @param {module:api/BeezUPApi~getAvailableChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelHeader>}
     */
    this.getAvailableChannels = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getAvailableChannels");
      }


      var pathParams = {
      };
      var queryParams = {
        'storeId': storeId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChannelHeader];

      return this.apiClient.callApi(
        '/user/channels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBillingPeriods operation.
     * @callback module:api/BeezUPApi~getBillingPeriodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillingPeriods} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing periods conditions
     * @param {module:api/BeezUPApi~getBillingPeriodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillingPeriods}
     */
    this.getBillingPeriods = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BillingPeriods;

      return this.apiClient.callApi(
        '/user/customer/billingPeriods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalog operation.
     * @callback module:api/BeezUPApi~getChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the channel catalog information
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~getChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalog}
     */
    this.getChannelCatalog = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalog");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalog;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogCategories operation.
     * @callback module:api/BeezUPApi~getChannelCatalogCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogCategoryMappings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel catalog categories
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~getChannelCatalogCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogCategoryMappings}
     */
    this.getChannelCatalogCategories = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogCategories");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogCategoryMappings;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/categoryMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogExclusionFilterOperators operation.
     * @callback module:api/BeezUPApi~getChannelCatalogExclusionFilterOperatorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExclusionFilterOperator>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel catalog exclusion filter operators
     * @param {module:api/BeezUPApi~getChannelCatalogExclusionFilterOperatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExclusionFilterOperator>}
     */
    this.getChannelCatalogExclusionFilterOperators = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ExclusionFilterOperator];

      return this.apiClient.callApi(
        '/user/channelCatalogs/exclusionFilterOperators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogExportationCacheInfo operation.
     * @callback module:api/BeezUPApi~getChannelCatalogExportationCacheInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogExportCacheInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the exportation cache information
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:api/BeezUPApi~getChannelCatalogExportationCacheInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogExportCacheInfoResponse}
     */
    this.getChannelCatalogExportationCacheInfo = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogExportationCacheInfo");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogExportCacheInfoResponse;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/exportations/cache', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogExportationHistory operation.
     * @callback module:api/BeezUPApi~getChannelCatalogExportationHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogExportationHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the exportation history
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {Number} pageNumber The page number you want to get
     * @param {Number} pageSize The entry count you want to get
     * @param {module:api/BeezUPApi~getChannelCatalogExportationHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogExportationHistory}
     */
    this.getChannelCatalogExportationHistory = function(channelCatalogId, pageNumber, pageSize, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogExportationHistory");
      }

      // verify the required parameter 'pageNumber' is set
      if (pageNumber == undefined || pageNumber == null) {
        throw new Error("Missing the required parameter 'pageNumber' when calling getChannelCatalogExportationHistory");
      }

      // verify the required parameter 'pageSize' is set
      if (pageSize == undefined || pageSize == null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getChannelCatalogExportationHistory");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
        'pageNumber': pageNumber,
        'pageSize': pageSize
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogExportationHistory;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/exportations/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogMarketplaceProperties operation.
     * @callback module:api/BeezUPApi~getChannelCatalogMarketplacePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogMarketplaceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the marketplace properties for a channel catalog
     * @param {String} channelCatalogId 
     * @param {module:api/BeezUPApi~getChannelCatalogMarketplacePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogMarketplaceProperties}
     */
    this.getChannelCatalogMarketplaceProperties = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogMarketplaceProperties");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogMarketplaceProperties;

      return this.apiClient.callApi(
        '/user/marketplaces/channelcatalogs/{channelCatalogId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogMarketplaceSettings operation.
     * @callback module:api/BeezUPApi~getChannelCatalogMarketplaceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogMarketplaceSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the marketplace settings for a channel catalog
     * @param {String} channelCatalogId Channel Catalog Id to query (required)
     * @param {module:api/BeezUPApi~getChannelCatalogMarketplaceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogMarketplaceSettings}
     */
    this.getChannelCatalogMarketplaceSettings = function(channelCatalogId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogMarketplaceSettings");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogMarketplaceSettings;

      return this.apiClient.callApi(
        '/user/marketplaces/channelcatalogs/{channelCatalogId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogProductByChannelCatalog operation.
     * @callback module:api/BeezUPApi~getChannelCatalogProductByChannelCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogProductByChannelCatalogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel catalog products related to these channel catalogs
     * @param {String} productId The product identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelCatalogProductByChannelCatalogRequest} opts.request 
     * @param {module:api/BeezUPApi~getChannelCatalogProductByChannelCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogProductByChannelCatalogResponse}
     */
    this.getChannelCatalogProductByChannelCatalog = function(productId, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getChannelCatalogProductByChannelCatalog");
      }


      var pathParams = {
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogProductByChannelCatalogResponse;

      return this.apiClient.callApi(
        '/user/channelCatalogs/products/{productId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogProductInfo operation.
     * @callback module:api/BeezUPApi~getChannelCatalogProductInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogProductInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel catalog product information
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {String} productId The product identifier
     * @param {module:api/BeezUPApi~getChannelCatalogProductInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogProductInfo}
     */
    this.getChannelCatalogProductInfo = function(channelCatalogId, productId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfo");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling getChannelCatalogProductInfo");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId,
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogProductInfo;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogProductInfoList operation.
     * @callback module:api/BeezUPApi~getChannelCatalogProductInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogProductInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel catalog product information list
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/GetChannelCatalogProductInfoListRequest} opts.request The channel catalog product list filter
     * @param {module:api/BeezUPApi~getChannelCatalogProductInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogProductInfoList}
     */
    this.getChannelCatalogProductInfoList = function(channelCatalogId, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling getChannelCatalogProductInfoList");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogProductInfoList;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCatalogs operation.
     * @callback module:api/BeezUPApi~getChannelCatalogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelCatalogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all your current channel catalogs
     * @param {Object} opts Optional parameters
     * @param {String} opts.storeId The store identifier
     * @param {module:api/BeezUPApi~getChannelCatalogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelCatalogList}
     */
    this.getChannelCatalogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'storeId': opts['storeId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelCatalogList;

      return this.apiClient.callApi(
        '/user/channelCatalogs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelCategories operation.
     * @callback module:api/BeezUPApi~getChannelCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelRootCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel categories
     * @param {String} channelId The channel identifier
     * @param {Array.<String>} acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
     * @param {module:api/BeezUPApi~getChannelCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelRootCategory}
     */
    this.getChannelCategories = function(channelId, acceptEncoding, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelCategories");
      }

      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding == undefined || acceptEncoding == null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling getChannelCategories");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelRootCategory;

      return this.apiClient.callApi(
        '/user/channels/{channelId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelColumns operation.
     * @callback module:api/BeezUPApi~getChannelColumnsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelColumn>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel columns
     * @param {String} channelId The channel identifier
     * @param {Array.<String>} acceptEncoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/BeezUPCommonChannelColumnId>} opts.request Allow you to filter the channel column identifier list your want to get
     * @param {module:api/BeezUPApi~getChannelColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelColumn>}
     */
    this.getChannelColumns = function(channelId, acceptEncoding, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelColumns");
      }

      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding == undefined || acceptEncoding == null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling getChannelColumns");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChannelColumn];

      return this.apiClient.callApi(
        '/user/channels/{channelId}/columns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelInfo operation.
     * @callback module:api/BeezUPApi~getChannelInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel information
     * @param {String} channelId The channel identifier
     * @param {module:api/BeezUPApi~getChannelInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelInfo}
     */
    this.getChannelInfo = function(channelId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelInfo");
      }


      var pathParams = {
        'channelId': channelId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelInfo;

      return this.apiClient.callApi(
        '/user/channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/BeezUPApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelInfoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The channel list for one country
     * @param {String} countryIsoCode The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry 
     * @param {Array.<String>} acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.
     * @param {module:api/BeezUPApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelInfoList}
     */
    this.getChannels = function(countryIsoCode, acceptEncoding, callback) {
      var postBody = null;

      // verify the required parameter 'countryIsoCode' is set
      if (countryIsoCode == undefined || countryIsoCode == null) {
        throw new Error("Missing the required parameter 'countryIsoCode' when calling getChannels");
      }

      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding == undefined || acceptEncoding == null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling getChannels");
      }


      var pathParams = {
        'countryIsoCode': countryIsoCode
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelInfoList;

      return this.apiClient.callApi(
        '/public/channels/{countryIsoCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelsIndex operation.
     * @callback module:api/BeezUPApi~getChannelsIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicChannelIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public channel index
     * Use this operation to get the correct link to the channels and to the list of values
     * @param {module:api/BeezUPApi~getChannelsIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicChannelIndex}
     */
    this.getChannelsIndex = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicChannelIndex;

      return this.apiClient.callApi(
        '/public/channels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getContracts operation.
     * @callback module:api/BeezUPApi~getContractsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contracts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contract list
     * @param {module:api/BeezUPApi~getContractsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contracts}
     */
    this.getContracts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Contracts;

      return this.apiClient.callApi(
        '/user/customer/contracts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCreditCardInfo operation.
     * @callback module:api/BeezUPApi~getCreditCardInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditCardInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credit card information
     * @param {module:api/BeezUPApi~getCreditCardInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditCardInfoResponse}
     */
    this.getCreditCardInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreditCardInfoResponse;

      return this.apiClient.callApi(
        '/user/customer/account/creditCardInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriendInfo operation.
     * @callback module:api/BeezUPApi~getFriendInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserFriendInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get friend information
     * @param {String} userId Your friend user id
     * @param {module:api/BeezUPApi~getFriendInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserFriendInfo}
     */
    this.getFriendInfo = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getFriendInfo");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserFriendInfo;

      return this.apiClient.callApi(
        '/user/customer/friends/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvoices operation.
     * @callback module:api/BeezUPApi~getInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invoices} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all your invoices
     * @param {module:api/BeezUPApi~getInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invoices}
     */
    this.getInvoices = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Invoices;

      return this.apiClient.callApi(
        '/user/customer/invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketplaceAccountStores operation.
     * @callback module:api/BeezUPApi~getMarketplaceAccountStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarketplaceChannelCatalogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get  you marketplace channel catalog list
     * @param {module:api/BeezUPApi~getMarketplaceAccountStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarketplaceChannelCatalogList}
     */
    this.getMarketplaceAccountStores = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MarketplaceChannelCatalogList;

      return this.apiClient.callApi(
        '/user/marketplaces/channelcatalogs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketplaceAccountsSynchronization operation.
     * @callback module:api/BeezUPApi~getMarketplaceAccountsSynchronizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountSynchronizations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current synchronization status between your marketplaces and BeezUP accounts
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getMarketplaceAccountsSynchronizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountSynchronizations}
     */
    this.getMarketplaceAccountsSynchronization = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountSynchronizations;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOffer operation.
     * @callback module:api/BeezUPApi~getOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Offer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offer pricing
     * Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
     * @param {module:model/OfferRequest} request 
     * @param {module:api/BeezUPApi~getOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Offer}
     */
    this.getOffer = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getOffer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Offer;

      return this.apiClient.callApi(
        '/user/customer/offers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/BeezUPApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full Order and Order Item(s) properties
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.getOrder = function(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrder");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling getOrder");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling getOrder");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderExportations operation.
     * @callback module:api/BeezUPApi~getOrderExportationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderExportations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paginated list of Order report exportations
     * @param {Number} pageNumber The page number you want to get
     * @param {Number} pageSize The entry count you want to get
     * @param {String} storeId The store identifier to regroup the order exportations
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getOrderExportationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderExportations}
     */
    this.getOrderExportations = function(pageNumber, pageSize, storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'pageNumber' is set
      if (pageNumber == undefined || pageNumber == null) {
        throw new Error("Missing the required parameter 'pageNumber' when calling getOrderExportations");
      }

      // verify the required parameter 'pageSize' is set
      if (pageSize == undefined || pageSize == null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getOrderExportations");
      }

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getOrderExportations");
      }


      var pathParams = {
      };
      var queryParams = {
        'pageNumber': pageNumber,
        'pageSize': pageSize,
        'storeId': storeId
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderExportations;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/exportations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderHistory operation.
     * @callback module:api/BeezUPApi~getOrderHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Order&#39;s harvest and change history
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getOrderHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderHistory}
     */
    this.getOrderHistory = function(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getOrderHistory");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling getOrderHistory");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling getOrderHistory");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderHistory;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderIndex operation.
     * @callback module:api/BeezUPApi~getOrderIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all actions you can do on the order API
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getOrderIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderIndex}
     */
    this.getOrderIndex = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderIndex;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderListFull operation.
     * @callback module:api/BeezUPApi~getOrderListFullCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderListFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paginated list of all Orders with all Order and Order Item(s) properties
     * The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
     * @param {Array.<String>} acceptEncoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
     * @param {module:model/OrderListRequest} request 
     * @param {module:api/BeezUPApi~getOrderListFullCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderListFull}
     */
    this.getOrderListFull = function(acceptEncoding, request, callback) {
      var postBody = request;

      // verify the required parameter 'acceptEncoding' is set
      if (acceptEncoding == undefined || acceptEncoding == null) {
        throw new Error("Missing the required parameter 'acceptEncoding' when calling getOrderListFull");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getOrderListFull");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Encoding': acceptEncoding
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderListFull;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/list/full', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderListLight operation.
     * @callback module:api/BeezUPApi~getOrderListLightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderListLight} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a paginated list of all Orders without details
     * @param {module:model/OrderListRequest} request 
     * @param {module:api/BeezUPApi~getOrderListLightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderListLight}
     */
    this.getOrderListLight = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getOrderListLight");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderListLight;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/list/light', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfilePictureInfo operation.
     * @callback module:api/BeezUPApi~getProfilePictureInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePictureInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile picture information
     * @param {module:api/BeezUPApi~getProfilePictureInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePictureInfoResponse}
     */
    this.getProfilePictureInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProfilePictureInfoResponse;

      return this.apiClient.callApi(
        '/user/customer/account/profilePictureInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicListOfValues operation.
     * @callback module:api/BeezUPApi~getPublicListOfValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicListOfValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of values related to this list name
     * @param {String} listName The list of value name your want to get
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.acceptLanguage Indicates that the client accepts the following languages.
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getPublicListOfValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicListOfValuesResponse}
     */
    this.getPublicListOfValues = function(listName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'listName' is set
      if (listName == undefined || listName == null) {
        throw new Error("Missing the required parameter 'listName' when calling getPublicListOfValues");
      }


      var pathParams = {
        'listName': listName
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicListOfValuesResponse;

      return this.apiClient.callApi(
        '/public/lov/{listName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublicLovIndex operation.
     * @callback module:api/BeezUPApi~getPublicLovIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicLovIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all list names
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getPublicLovIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicLovIndex}
     */
    this.getPublicLovIndex = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicLovIndex;

      return this.apiClient.callApi(
        '/public/lov/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublications operation.
     * @callback module:api/BeezUPApi~getPublicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountPublications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the publication history for an account, sorted by descending start date
     * @param {String} marketplaceTechnicalCode Marketplace Technical Code to query (required)
     * @param {Number} accountId Account Id to query (required)
     * @param {Object} opts Optional parameters
     * @param {String} opts.channelCatalogId Channel Catalog Id by which to filter (optional)
     * @param {Number} opts.count Amount of entries to fetch (optional, default set to 10) (default to 10)
     * @param {Array.<module:model/String>} opts.publicationTypes Publication types by which to filter (optional)
     * @param {module:api/BeezUPApi~getPublicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountPublications}
     */
    this.getPublications = function(marketplaceTechnicalCode, accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling getPublications");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling getPublications");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId
      };
      var queryParams = {
        'channelCatalogId': opts['channelCatalogId'],
        'count': opts['count'],
        'publicationTypes': this.apiClient.buildCollectionParam(opts['publicationTypes'], 'csv')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountPublications;

      return this.apiClient.callApi(
        '/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportFilter operation.
     * @callback module:api/BeezUPApi~getReportFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report filter description
     * @param {String} storeId Your store identifier
     * @param {String} reportFilterId Your report filter identifier
     * @param {module:api/BeezUPApi~getReportFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportFilter}
     */
    this.getReportFilter = function(storeId, reportFilterId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getReportFilter");
      }

      // verify the required parameter 'reportFilterId' is set
      if (reportFilterId == undefined || reportFilterId == null) {
        throw new Error("Missing the required parameter 'reportFilterId' when calling getReportFilter");
      }


      var pathParams = {
        'storeId': storeId,
        'reportFilterId': reportFilterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportFilter;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/filters/{reportFilterId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportFilters operation.
     * @callback module:api/BeezUPApi~getReportFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportFilters} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report filter list for the given store
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getReportFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportFilters}
     */
    this.getReportFilters = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getReportFilters");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportFilters;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRights operation.
     * @callback module:api/BeezUPApi~getRightsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionalityRightInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store&#39;s rights
     * @param {String} storeId Your store identifier
     * @param {Array.<module:model/String>} functionalityCodeList The functionality code list you want to check
     * @param {module:api/BeezUPApi~getRightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionalityRightInfo>}
     */
    this.getRights = function(storeId, functionalityCodeList, callback) {
      var postBody = functionalityCodeList;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRights");
      }

      // verify the required parameter 'functionalityCodeList' is set
      if (functionalityCodeList == undefined || functionalityCodeList == null) {
        throw new Error("Missing the required parameter 'functionalityCodeList' when calling getRights");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FunctionalityRightInfo];

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/rights', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/BeezUPApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rule}
     */
    this.getRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling getRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rule;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRules operation.
     * @callback module:api/BeezUPApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of rules for a given store
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleList}
     */
    this.getRules = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRules");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleList;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRulesExecutions operation.
     * @callback module:api/BeezUPApi~getRulesExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleExecutionReportings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the rules execution history
     * @param {String} storeId Your store identifier
     * @param {Number} pageNumber The page to retrieve
     * @param {Number} pageSize The count of rule history to retrieve
     * @param {module:api/BeezUPApi~getRulesExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleExecutionReportings}
     */
    this.getRulesExecutions = function(storeId, pageNumber, pageSize, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getRulesExecutions");
      }

      // verify the required parameter 'pageNumber' is set
      if (pageNumber == undefined || pageNumber == null) {
        throw new Error("Missing the required parameter 'pageNumber' when calling getRulesExecutions");
      }

      // verify the required parameter 'pageSize' is set
      if (pageSize == undefined || pageSize == null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getRulesExecutions");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'pageNumber': pageNumber,
        'pageSize': pageSize
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RuleExecutionReportings;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShares operation.
     * @callback module:api/BeezUPApi~getSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreShares} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shares related to this store
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreShares}
     */
    this.getShares = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getShares");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StoreShares;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStandardOffers operation.
     * @callback module:api/BeezUPApi~getStandardOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StandardOffers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all standard offers
     * @param {module:api/BeezUPApi~getStandardOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StandardOffers}
     */
    this.getStandardOffers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StandardOffers;

      return this.apiClient.callApi(
        '/user/customer/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStore operation.
     * @callback module:api/BeezUPApi~getStoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreHeader} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store&#39;s information
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getStoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreHeader}
     */
    this.getStore = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StoreHeader;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreAlerts operation.
     * @callback module:api/BeezUPApi~getStoreAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreAlerts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store&#39;s alerts
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getStoreAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreAlerts}
     */
    this.getStoreAlerts = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreAlerts");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StoreAlerts;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreReportByCategory operation.
     * @callback module:api/BeezUPApi~getStoreReportByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportByCategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report by category
     * Get the report by category
     * @param {String} storeId Your store identifier
     * @param {module:model/ReportByCategoryRequest} request 
     * @param {module:api/BeezUPApi~getStoreReportByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportByCategoryResponse}
     */
    this.getStoreReportByCategory = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreReportByCategory");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getStoreReportByCategory");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportByCategoryResponse;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/bycategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreReportByChannel operation.
     * @callback module:api/BeezUPApi~getStoreReportByChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportByChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report by channel
     * Get the report by channel
     * @param {String} storeId Your store identifier
     * @param {module:model/ReportByChannelRequest} request 
     * @param {module:api/BeezUPApi~getStoreReportByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportByChannelResponse}
     */
    this.getStoreReportByChannel = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreReportByChannel");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getStoreReportByChannel");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportByChannelResponse;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/bychannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreReportByDay operation.
     * @callback module:api/BeezUPApi~getStoreReportByDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportByDayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report by day
     * Get the report by day
     * @param {String} storeId Your store identifier
     * @param {module:model/ReportByDayRequest} request 
     * @param {module:api/BeezUPApi~getStoreReportByDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportByDayResponse}
     */
    this.getStoreReportByDay = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreReportByDay");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getStoreReportByDay");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportByDayResponse;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/byday', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreReportByDayExport operation.
     * @callback module:api/BeezUPApi~getStoreReportByDayExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BeezUPCommonLink3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report by day
     * Get the report by day
     * @param {String} storeId Your store identifier
     * @param {module:model/String} format 
     * @param {module:model/ReportByDayRequest} request 
     * @param {module:api/BeezUPApi~getStoreReportByDayExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BeezUPCommonLink3}
     */
    this.getStoreReportByDayExport = function(storeId, format, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreReportByDayExport");
      }

      // verify the required parameter 'format' is set
      if (format == undefined || format == null) {
        throw new Error("Missing the required parameter 'format' when calling getStoreReportByDayExport");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getStoreReportByDayExport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'format': format
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BeezUPCommonLink3;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/byday/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreReportByProduct operation.
     * @callback module:api/BeezUPApi~getStoreReportByProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportByProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the report by product
     * Get the report by product
     * @param {String} storeId Your store identifier
     * @param {module:model/ReportByProductRequest} request 
     * @param {module:api/BeezUPApi~getStoreReportByProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportByProductResponse}
     */
    this.getStoreReportByProduct = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreReportByProduct");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling getStoreReportByProduct");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportByProductResponse;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/byproduct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreTrackedClicks operation.
     * @callback module:api/BeezUPApi~getStoreTrackedClicksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackedClicks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest clicks tracked
     * @param {String} storeId Your store identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The click&#39;s count you want to get (default to 100)
     * @param {module:api/BeezUPApi~getStoreTrackedClicksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackedClicks}
     */
    this.getStoreTrackedClicks = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreTrackedClicks");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrackedClicks;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/tracking/clicks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreTrackedExternalOrders operation.
     * @callback module:api/BeezUPApi~getStoreTrackedExternalOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackedExternalOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest external orders tracked
     * @param {String} storeId Your store identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The external order&#39;s count you want to get (default to 100)
     * @param {module:api/BeezUPApi~getStoreTrackedExternalOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackedExternalOrders}
     */
    this.getStoreTrackedExternalOrders = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreTrackedExternalOrders");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrackedExternalOrders;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/tracking/externalorders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreTrackedOrders operation.
     * @callback module:api/BeezUPApi~getStoreTrackedOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackedOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest orders tracked
     * @param {String} storeId Your store identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The order&#39;s count you want to get (default to 100)
     * @param {module:api/BeezUPApi~getStoreTrackedOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackedOrders}
     */
    this.getStoreTrackedOrders = function(storeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreTrackedOrders");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrackedOrders;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/tracking/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreTrackingStatus operation.
     * @callback module:api/BeezUPApi~getStoreTrackingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoreTrackingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store tracking synchronization status
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~getStoreTrackingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoreTrackingStatus}
     */
    this.getStoreTrackingStatus = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling getStoreTrackingStatus");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StoreTrackingStatus;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/tracking/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStores operation.
     * @callback module:api/BeezUPApi~getStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stores} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get store list
     * @param {module:api/BeezUPApi~getStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stores}
     */
    this.getStores = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Stores;

      return this.apiClient.callApi(
        '/user/customer/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackingStatus operation.
     * @callback module:api/BeezUPApi~getTrackingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the synchronization status of the clicks and orders
     * Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
     * @param {module:api/BeezUPApi~getTrackingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackingStatus}
     */
    this.getTrackingStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrackingStatus;

      return this.apiClient.callApi(
        '/user/analytics/tracking/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAccountInfo operation.
     * @callback module:api/BeezUPApi~getUserAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user account information
     * @param {module:api/BeezUPApi~getUserAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountInfo}
     */
    this.getUserAccountInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountInfo;

      return this.apiClient.callApi(
        '/user/customer/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserListOfValues operation.
     * @callback module:api/BeezUPApi~getUserListOfValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserListOfValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of values related to this list name
     * @param {String} listName The list of value name your want to get
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.acceptLanguage Indicates that the client accepts the following languages.
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~getUserListOfValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserListOfValuesResponse}
     */
    this.getUserListOfValues = function(listName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'listName' is set
      if (listName == undefined || listName == null) {
        throw new Error("Missing the required parameter 'listName' when calling getUserListOfValues");
      }


      var pathParams = {
        'listName': listName
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserListOfValuesResponse;

      return this.apiClient.callApi(
        '/user/lov/{listName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserLovIndex operation.
     * @callback module:api/BeezUPApi~getUserLovIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLovIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all list names
     * @param {module:api/BeezUPApi~getUserLovIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLovIndex}
     */
    this.getUserLovIndex = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserLovIndex;

      return this.apiClient.callApi(
        '/user/lov/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the harvestAll operation.
     * @callback module:api/BeezUPApi~harvestAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send harvest request to all your marketplaces
     * @param {module:api/BeezUPApi~harvestAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.harvestAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/harvest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the harvestOrder operation.
     * @callback module:api/BeezUPApi~harvestOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send harvest request for a single Order
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:api/BeezUPApi~harvestOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.harvestOrder = function(marketplaceTechnicalCode, accountId, beezUPOrderId, callback) {
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling harvestOrder");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling harvestOrder");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling harvestOrder");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headOrder operation.
     * @callback module:api/BeezUPApi~headOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the meta information about the order (ETag, Last-Modified)
     * The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body. This could be useful  
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.ifNoneMatch ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
     * @param {module:api/BeezUPApi~headOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headOrder = function(marketplaceTechnicalCode, accountId, beezUPOrderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling headOrder");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling headOrder");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling headOrder");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationActivateAutoImport operation.
     * @callback module:api/BeezUPApi~importationActivateAutoImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate the auto importation of the last successful manual catalog importation.
     * Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~importationActivateAutoImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationActivateAutoImport = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationActivateAutoImport");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/autoImport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationCancel operation.
     * @callback module:api/BeezUPApi~importationCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationCancel = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationCancel");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationCancel");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationCommit operation.
     * @callback module:api/BeezUPApi~importationCommitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit Importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationCommitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationCommit = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationCommit");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationCommit");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationCommitColumns operation.
     * @callback module:api/BeezUPApi~importationCommitColumnsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit columns
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationCommitColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationCommitColumns = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationCommitColumns");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationCommitColumns");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/commitColumns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationConfigureCatalogColumn operation.
     * @callback module:api/BeezUPApi~importationConfigureCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure catalog column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/ConfigureCatalogColumnCatalogRequest} request 
     * @param {module:api/BeezUPApi~importationConfigureCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationConfigureCatalogColumn = function(storeId, executionId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationConfigureCatalogColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationConfigureCatalogColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationConfigureCatalogColumn");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling importationConfigureCatalogColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationConfigureRemainingCatalogColumns operation.
     * @callback module:api/BeezUPApi~importationConfigureRemainingCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure remaining catalog columns
     * This operation should be used after you have mapped the required BeezUP Columns
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationConfigureRemainingCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationConfigureRemainingCatalogColumns = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationConfigureRemainingCatalogColumns");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationConfigureRemainingCatalogColumns");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationDeleteCustomColumn operation.
     * @callback module:api/BeezUPApi~importationDeleteCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Custom Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationDeleteCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationDeleteCustomColumn = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationDeleteCustomColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationDeleteCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationDeleteCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetCustomColumnExpression operation.
     * @callback module:api/BeezUPApi~importationGetCustomColumnExpressionCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the encrypted custom column expression in this importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationGetCustomColumnExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.importationGetCustomColumnExpression = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetCustomColumnExpression");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetCustomColumnExpression");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationGetCustomColumnExpression");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetCustomColumns operation.
     * @callback module:api/BeezUPApi~importationGetCustomColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomColumns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom columns currently place in this importation
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationGetCustomColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomColumns}
     */
    this.importationGetCustomColumns = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetCustomColumns");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetCustomColumns");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomColumns;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetDetectedCatalogColumns operation.
     * @callback module:api/BeezUPApi~importationGetDetectedCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectedCatalogColumns} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detected catalog columns during this importation.
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationGetDetectedCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectedCatalogColumns}
     */
    this.importationGetDetectedCatalogColumns = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetDetectedCatalogColumns");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetDetectedCatalogColumns");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DetectedCatalogColumns;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetImportationMonitoring operation.
     * @callback module:api/BeezUPApi~importationGetImportationMonitoringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportationMonitoring} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the importation status
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationGetImportationMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportationMonitoring}
     */
    this.importationGetImportationMonitoring = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetImportationMonitoring");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetImportationMonitoring");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportationMonitoring;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetManualUpdateLastInputConfig operation.
     * @callback module:api/BeezUPApi~importationGetManualUpdateLastInputConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastManualImportInputConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last input configuration
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~importationGetManualUpdateLastInputConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastManualImportInputConfiguration}
     */
    this.importationGetManualUpdateLastInputConfig = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetManualUpdateLastInputConfig");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LastManualImportInputConfiguration;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/inputConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetProductSample operation.
     * @callback module:api/BeezUPApi~importationGetProductSampleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductSample} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the product sample related to this importation with all columns (catalog and custom)
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {Number} productSampleIndex Index of the product sample. Starting from 0 to 99.
     * @param {module:api/BeezUPApi~importationGetProductSampleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductSample}
     */
    this.importationGetProductSample = function(storeId, executionId, productSampleIndex, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetProductSample");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetProductSample");
      }

      // verify the required parameter 'productSampleIndex' is set
      if (productSampleIndex == undefined || productSampleIndex == null) {
        throw new Error("Missing the required parameter 'productSampleIndex' when calling importationGetProductSample");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'productSampleIndex': productSampleIndex
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProductSample;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetProductSampleCustomColumnValue operation.
     * @callback module:api/BeezUPApi~importationGetProductSampleCustomColumnValueCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product sample custom column value related to this importation.
     * /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {Number} productSampleIndex Index of the product sample. Starting from 0 to 99.
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationGetProductSampleCustomColumnValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.importationGetProductSampleCustomColumnValue = function(storeId, executionId, productSampleIndex, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetProductSampleCustomColumnValue");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationGetProductSampleCustomColumnValue");
      }

      // verify the required parameter 'productSampleIndex' is set
      if (productSampleIndex == undefined || productSampleIndex == null) {
        throw new Error("Missing the required parameter 'productSampleIndex' when calling importationGetProductSampleCustomColumnValue");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationGetProductSampleCustomColumnValue");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'productSampleIndex': productSampleIndex,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationGetReportings operation.
     * @callback module:api/BeezUPApi~importationGetReportingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImportationReporting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the latest catalog importation reporting
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~importationGetReportingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImportationReporting>}
     */
    this.importationGetReportings = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationGetReportings");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ImportationReporting];

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationIgnoreColumn operation.
     * @callback module:api/BeezUPApi~importationIgnoreColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ignore Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationIgnoreColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationIgnoreColumn = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationIgnoreColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationIgnoreColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationIgnoreColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationMapCatalogColumn operation.
     * @callback module:api/BeezUPApi~importationMapCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map catalog column to a BeezUP column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The catalog column identifier
     * @param {module:model/MapBeezUPColumnRequest} request 
     * @param {module:api/BeezUPApi~importationMapCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationMapCatalogColumn = function(storeId, executionId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationMapCatalogColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationMapCatalogColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationMapCatalogColumn");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling importationMapCatalogColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationMapCustomColumn operation.
     * @callback module:api/BeezUPApi~importationMapCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map custom column to a BeezUP column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/MapBeezUPColumnRequest} request 
     * @param {module:api/BeezUPApi~importationMapCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationMapCustomColumn = function(storeId, executionId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationMapCustomColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationMapCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationMapCustomColumn");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling importationMapCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationReattendColumn operation.
     * @callback module:api/BeezUPApi~importationReattendColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reattend Column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationReattendColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationReattendColumn = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationReattendColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationReattendColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationReattendColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationSaveCustomColumn operation.
     * @callback module:api/BeezUPApi~importationSaveCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or replace a custom column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:model/ChangeCustomColumnRequest} request 
     * @param {module:api/BeezUPApi~importationSaveCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationSaveCustomColumn = function(storeId, executionId, columnId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationSaveCustomColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationSaveCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationSaveCustomColumn");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling importationSaveCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationStartManualUpdate operation.
     * @callback module:api/BeezUPApi~importationStartManualUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinksImportationGetImportationMonitoringLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start Manual Import
     * @param {String} storeId Your store identifier
     * @param {module:model/StartManualImportRequest} request 
     * @param {module:api/BeezUPApi~importationStartManualUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinksImportationGetImportationMonitoringLink}
     */
    this.importationStartManualUpdate = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationStartManualUpdate");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling importationStartManualUpdate");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LinksImportationGetImportationMonitoringLink;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationTechnicalProgression operation.
     * @callback module:api/BeezUPApi~importationTechnicalProgressionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportationTechnicalProgression} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get technical progression
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {module:api/BeezUPApi~importationTechnicalProgressionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportationTechnicalProgression}
     */
    this.importationTechnicalProgression = function(storeId, executionId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationTechnicalProgression");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationTechnicalProgression");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportationTechnicalProgression;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/technicalProgression', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationUnmapCatalogColumn operation.
     * @callback module:api/BeezUPApi~importationUnmapCatalogColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmap catalog column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The catalog column identifier
     * @param {module:api/BeezUPApi~importationUnmapCatalogColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationUnmapCatalogColumn = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationUnmapCatalogColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationUnmapCatalogColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationUnmapCatalogColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importationUnmapCustomColumn operation.
     * @callback module:api/BeezUPApi~importationUnmapCustomColumnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmap custom column
     * @param {String} storeId Your store identifier
     * @param {String} executionId The execution identifier of you catalog importation
     * @param {String} columnId The custom column identifier
     * @param {module:api/BeezUPApi~importationUnmapCustomColumnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importationUnmapCustomColumn = function(storeId, executionId, columnId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling importationUnmapCustomColumn");
      }

      // verify the required parameter 'executionId' is set
      if (executionId == undefined || executionId == null) {
        throw new Error("Missing the required parameter 'executionId' when calling importationUnmapCustomColumn");
      }

      // verify the required parameter 'columnId' is set
      if (columnId == undefined || columnId == null) {
        throw new Error("Missing the required parameter 'columnId' when calling importationUnmapCustomColumn");
      }


      var pathParams = {
        'storeId': storeId,
        'executionId': executionId,
        'columnId': columnId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/BeezUPApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * User Login - The login will give your tokens
     * @param {module:model/LoginRequest} request 
     * @param {module:api/BeezUPApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiCredentials}
     */
    this.login = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApiCredentials;

      return this.apiClient.callApi(
        '/public/security/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/BeezUPApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log out the current user from go2
     * Log out the current user from go2
     * @param {module:api/BeezUPApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.logout = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/security/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lostPassword operation.
     * @callback module:api/BeezUPApi~lostPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lost password
     * Lost password - Your password will be regenerated and sent to your email
     * @param {module:model/BeezUPCommonEmail} email Your email
     * @param {module:api/BeezUPApi~lostPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lostPassword = function(email, callback) {
      var postBody = email;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling lostPassword");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/public/security/lostpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapChannelCatalogCategory operation.
     * @callback module:api/BeezUPApi~mapChannelCatalogCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map channel catalog category
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/MapCategoryRequest} request 
     * @param {module:api/BeezUPApi~mapChannelCatalogCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mapChannelCatalogCategory = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling mapChannelCatalogCategory");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling mapChannelCatalogCategory");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/categoryMappings/map', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapChannelCatalogColumns operation.
     * @callback module:api/BeezUPApi~mapChannelCatalogColumnsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure channel catalog column mappings
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/ColumnMappingList} request 
     * @param {module:api/BeezUPApi~mapChannelCatalogColumnsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.mapChannelCatalogColumns = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling mapChannelCatalogColumns");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling mapChannelCatalogColumns");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/columnMappings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveDownRule operation.
     * @callback module:api/BeezUPApi~moveDownRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move the rule down
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~moveDownRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.moveDownRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling moveDownRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling moveDownRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}/movedown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveUpRule operation.
     * @callback module:api/BeezUPApi~moveUpRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move the rule up
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~moveUpRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.moveUpRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling moveUpRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling moveUpRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}/moveup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the optimise operation.
     * @callback module:api/BeezUPApi~optimiseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
     * @param {String} storeId Your store identifier
     * @param {module:model/String} actionName 
     * @param {module:model/OptimiseRequest} request 
     * @param {module:api/BeezUPApi~optimiseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.optimise = function(storeId, actionName, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling optimise");
      }

      // verify the required parameter 'actionName' is set
      if (actionName == undefined || actionName == null) {
        throw new Error("Missing the required parameter 'actionName' when calling optimise");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling optimise");
      }


      var pathParams = {
        'storeId': storeId,
        'actionName': actionName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/optimisations/{actionName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the optimiseByCategory operation.
     * @callback module:api/BeezUPApi~optimiseByCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
     * @param {String} storeId Your store identifier
     * @param {String} catalogCategoryId The category identifier concerned by this optimisation
     * @param {module:model/String} actionName 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.request The channel identifier list concerned by this optimisation
     * @param {module:api/BeezUPApi~optimiseByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.optimiseByCategory = function(storeId, catalogCategoryId, actionName, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling optimiseByCategory");
      }

      // verify the required parameter 'catalogCategoryId' is set
      if (catalogCategoryId == undefined || catalogCategoryId == null) {
        throw new Error("Missing the required parameter 'catalogCategoryId' when calling optimiseByCategory");
      }

      // verify the required parameter 'actionName' is set
      if (actionName == undefined || actionName == null) {
        throw new Error("Missing the required parameter 'actionName' when calling optimiseByCategory");
      }


      var pathParams = {
        'storeId': storeId,
        'catalogCategoryId': catalogCategoryId,
        'actionName': actionName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the optimiseByChannel operation.
     * @callback module:api/BeezUPApi~optimiseByChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Optimise products&#39;s category
     * /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
     * @param {String} storeId Your store identifier
     * @param {String} channelId The channel identifier concerned by this optimisation
     * @param {module:model/String} actionName 
     * @param {module:api/BeezUPApi~optimiseByChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.optimiseByChannel = function(storeId, channelId, actionName, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling optimiseByChannel");
      }

      // verify the required parameter 'channelId' is set
      if (channelId == undefined || channelId == null) {
        throw new Error("Missing the required parameter 'channelId' when calling optimiseByChannel");
      }

      // verify the required parameter 'actionName' is set
      if (actionName == undefined || actionName == null) {
        throw new Error("Missing the required parameter 'actionName' when calling optimiseByChannel");
      }


      var pathParams = {
        'storeId': storeId,
        'channelId': channelId,
        'actionName': actionName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the optimiseByProduct operation.
     * @callback module:api/BeezUPApi~optimiseByProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Optimise products
     * /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
     * @param {String} storeId Your store identifier
     * @param {String} productId The product identifier concerned by this optimisation
     * @param {module:model/String} actionName 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.request The channel identifier list concerned by this optimisation
     * @param {module:api/BeezUPApi~optimiseByProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.optimiseByProduct = function(storeId, productId, actionName, opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling optimiseByProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling optimiseByProduct");
      }

      // verify the required parameter 'actionName' is set
      if (actionName == undefined || actionName == null) {
        throw new Error("Missing the required parameter 'actionName' when calling optimiseByProduct");
      }


      var pathParams = {
        'storeId': storeId,
        'productId': productId,
        'actionName': actionName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the overrideChannelCatalogProductOverrides operation.
     * @callback module:api/BeezUPApi~overrideChannelCatalogProductOverridesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Override channel catalog product values
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {String} productId The product identifier
     * @param {module:model/ProductOverrides} request 
     * @param {module:api/BeezUPApi~overrideChannelCatalogProductOverridesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.overrideChannelCatalogProductOverrides = function(channelCatalogId, productId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling overrideChannelCatalogProductOverrides");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling overrideChannelCatalogProductOverrides");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling overrideChannelCatalogProductOverrides");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId,
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateCurrentContract operation.
     * @callback module:api/BeezUPApi~reactivateCurrentContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate your terminated contract.
     * By calling this operation you can re-enable the auto renewal.
     * @param {module:api/BeezUPApi~reactivateCurrentContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reactivateCurrentContract = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/contracts/current/reenableAutoRenewal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reenableChannelCatalogProduct operation.
     * @callback module:api/BeezUPApi~reenableChannelCatalogProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reenable channel catalog product
     * By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {String} productId The product identifier
     * @param {module:api/BeezUPApi~reenableChannelCatalogProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reenableChannelCatalogProduct = function(channelCatalogId, productId, callback) {
      var postBody = null;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling reenableChannelCatalogProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId == undefined || productId == null) {
        throw new Error("Missing the required parameter 'productId' when calling reenableChannelCatalogProduct");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId,
        'productId': productId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/BeezUPApi~registerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Registration
     * User Registration - Create a new user on BeezUP
     * @param {module:model/RegisterRequest} request 
     * @param {module:api/BeezUPApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.register = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling register");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/public/security/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resendEmailActivation operation.
     * @callback module:api/BeezUPApi~resendEmailActivationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend email activation
     * @param {module:api/BeezUPApi~resendEmailActivationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resendEmailActivation = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/resendEmailActivation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runRule operation.
     * @callback module:api/BeezUPApi~runRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:api/BeezUPApi~runRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runRule = function(storeId, ruleId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling runRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling runRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runRules operation.
     * @callback module:api/BeezUPApi~runRulesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run all rules for this store
     * @param {String} storeId Your store identifier
     * @param {module:api/BeezUPApi~runRulesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runRules = function(storeId, callback) {
      var postBody = null;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling runRules");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCompanyInfo operation.
     * @callback module:api/BeezUPApi~saveCompanyInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change company information
     * @param {module:model/CompanyInfo} request 
     * @param {module:api/BeezUPApi~saveCompanyInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveCompanyInfo = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling saveCompanyInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/companyInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCreditCardInfo operation.
     * @callback module:api/BeezUPApi~saveCreditCardInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save user credit card info
     * @param {module:model/CreditCardInfo} request Credit card info
     * @param {module:api/BeezUPApi~saveCreditCardInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveCreditCardInfo = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling saveCreditCardInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/creditCardInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the savePersonalInfo operation.
     * @callback module:api/BeezUPApi~savePersonalInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save user personal information
     * @param {module:model/PersonalInfo} request 
     * @param {module:api/BeezUPApi~savePersonalInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.savePersonalInfo = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling savePersonalInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/personalInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveProfilePictureInfo operation.
     * @callback module:api/BeezUPApi~saveProfilePictureInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user picture information
     * @param {module:model/ProfilePictureInfo} request 
     * @param {module:api/BeezUPApi~saveProfilePictureInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveProfilePictureInfo = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling saveProfilePictureInfo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/account/profilePictureInfo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveReportFilter operation.
     * @callback module:api/BeezUPApi~saveReportFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the report filter
     * @param {String} storeId Your store identifier
     * @param {String} reportFilterId Your report filter identifier
     * @param {module:model/SaveReportFilterRequest} reportFilter 
     * @param {module:api/BeezUPApi~saveReportFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveReportFilter = function(storeId, reportFilterId, reportFilter, callback) {
      var postBody = reportFilter;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling saveReportFilter");
      }

      // verify the required parameter 'reportFilterId' is set
      if (reportFilterId == undefined || reportFilterId == null) {
        throw new Error("Missing the required parameter 'reportFilterId' when calling saveReportFilter");
      }

      // verify the required parameter 'reportFilter' is set
      if (reportFilter == undefined || reportFilter == null) {
        throw new Error("Missing the required parameter 'reportFilter' when calling saveReportFilter");
      }


      var pathParams = {
        'storeId': storeId,
        'reportFilterId': reportFilterId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/reports/filters/{reportFilterId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveStoreAlert operation.
     * @callback module:api/BeezUPApi~saveStoreAlertCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save store alert
     * @param {String} storeId Your store identifier
     * @param {Number} alertId 
     * @param {Array.<module:model/SaveStoreAlertRequest>} request 
     * @param {module:api/BeezUPApi~saveStoreAlertCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveStoreAlert = function(storeId, alertId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling saveStoreAlert");
      }

      // verify the required parameter 'alertId' is set
      if (alertId == undefined || alertId == null) {
        throw new Error("Missing the required parameter 'alertId' when calling saveStoreAlert");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling saveStoreAlert");
      }


      var pathParams = {
        'storeId': storeId,
        'alertId': alertId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/alerts/{alertId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setChannelCatalogMarketplaceSettings operation.
     * @callback module:api/BeezUPApi~setChannelCatalogMarketplaceSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save new marketplace settings for a channel catalog
     * Allow you to configure your marketplace settings.  Partial update accepted. 
     * @param {String} channelCatalogId Channel Catalog Id to query
     * @param {module:model/SetChannelCatalogMarketplaceSettingsRequest} model Settings to save
     * @param {module:api/BeezUPApi~setChannelCatalogMarketplaceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setChannelCatalogMarketplaceSettings = function(channelCatalogId, model, callback) {
      var postBody = model;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling setChannelCatalogMarketplaceSettings");
      }

      // verify the required parameter 'model' is set
      if (model == undefined || model == null) {
        throw new Error("Missing the required parameter 'model' when calling setChannelCatalogMarketplaceSettings");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/channelcatalogs/{channelCatalogId}/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMerchantOrderInfo operation.
     * @callback module:api/BeezUPApi~setMerchantOrderInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an Order&#39;s merchant information
     * @param {String} marketplaceTechnicalCode The marketplace technical code
     * @param {Number} accountId The account identifier
     * @param {String} beezUPOrderId The BeezUP Order identifier
     * @param {module:model/SetMerchantOrderInfoRequest} request 
     * @param {module:api/BeezUPApi~setMerchantOrderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setMerchantOrderInfo = function(marketplaceTechnicalCode, accountId, beezUPOrderId, request, callback) {
      var postBody = request;

      // verify the required parameter 'marketplaceTechnicalCode' is set
      if (marketplaceTechnicalCode == undefined || marketplaceTechnicalCode == null) {
        throw new Error("Missing the required parameter 'marketplaceTechnicalCode' when calling setMerchantOrderInfo");
      }

      // verify the required parameter 'accountId' is set
      if (accountId == undefined || accountId == null) {
        throw new Error("Missing the required parameter 'accountId' when calling setMerchantOrderInfo");
      }

      // verify the required parameter 'beezUPOrderId' is set
      if (beezUPOrderId == undefined || beezUPOrderId == null) {
        throw new Error("Missing the required parameter 'beezUPOrderId' when calling setMerchantOrderInfo");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling setMerchantOrderInfo");
      }


      var pathParams = {
        'marketplaceTechnicalCode': marketplaceTechnicalCode,
        'accountId': accountId,
        'beezUPOrderId': beezUPOrderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setMerchantOrderInfoList operation.
     * @callback module:api/BeezUPApi~setMerchantOrderInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchOrderOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a batch of operations to set an Order&#39;s merchant information
     * The purpose of this operation is to reduce the amount of request to the API.
     * @param {module:model/SetMerchantOrderInfoListRequest} request 
     * @param {module:api/BeezUPApi~setMerchantOrderInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchOrderOperationResponse}
     */
    this.setMerchantOrderInfoList = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling setMerchantOrderInfoList");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchOrderOperationResponse;

      return this.apiClient.callApi(
        '/user/marketplaces/orders/batches/setMerchantOrderInfos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the share operation.
     * @callback module:api/BeezUPApi~shareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share a store to another user
     * @param {String} storeId Your store identifier
     * @param {module:model/FriendEmail} email Your friend&#39;s email
     * @param {module:api/BeezUPApi~shareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.share = function(storeId, email, callback) {
      var postBody = email;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling share");
      }

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling share");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}/shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateCurrentContract operation.
     * @callback module:api/BeezUPApi~terminateCurrentContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule termination of your current contract at the end of the commitment.
     * By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
     * @param {module:model/TerminateContract} request Indicate the termination reason
     * @param {module:api/BeezUPApi~terminateCurrentContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.terminateCurrentContract = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling terminateCurrentContract");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/contracts/current/disableAutoRenewal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unmapChannelCatalogCategory operation.
     * @callback module:api/BeezUPApi~unmapChannelCatalogCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmap channel catalog category
     * @param {String} channelCatalogId The channel catalog identifier
     * @param {module:model/UnmapCategoryRequest} request 
     * @param {module:api/BeezUPApi~unmapChannelCatalogCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unmapChannelCatalogCategory = function(channelCatalogId, request, callback) {
      var postBody = request;

      // verify the required parameter 'channelCatalogId' is set
      if (channelCatalogId == undefined || channelCatalogId == null) {
        throw new Error("Missing the required parameter 'channelCatalogId' when calling unmapChannelCatalogCategory");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling unmapChannelCatalogCategory");
      }


      var pathParams = {
        'channelCatalogId': channelCatalogId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/BeezUPApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Rule
     * @param {String} storeId Your store identifier
     * @param {String} ruleId Your rule identifier
     * @param {module:model/UpdateRuleRequest} request 
     * @param {module:api/BeezUPApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRule = function(storeId, ruleId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateRule");
      }

      // verify the required parameter 'ruleId' is set
      if (ruleId == undefined || ruleId == null) {
        throw new Error("Missing the required parameter 'ruleId' when calling updateRule");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling updateRule");
      }


      var pathParams = {
        'storeId': storeId,
        'ruleId': ruleId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/analytics/{storeId}/rules/{ruleId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStore operation.
     * @callback module:api/BeezUPApi~updateStoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some store&#39;s information.
     * Update some store&#39;s information. FYI, you cannot change the country. 
     * @param {String} storeId Your store identifier
     * @param {module:model/UpdateStoreRequest} request 
     * @param {module:api/BeezUPApi~updateStoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateStore = function(storeId, request, callback) {
      var postBody = request;

      // verify the required parameter 'storeId' is set
      if (storeId == undefined || storeId == null) {
        throw new Error("Missing the required parameter 'storeId' when calling updateStore");
      }

      // verify the required parameter 'request' is set
      if (request == undefined || request == null) {
        throw new Error("Missing the required parameter 'request' when calling updateStore");
      }


      var pathParams = {
        'storeId': storeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/customer/stores/{storeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userCustomerGet operation.
     * @callback module:api/BeezUPApi~userCustomerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The index of all operations and LOV
     * @param {module:api/BeezUPApi~userCustomerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerIndex}
     */
    this.userCustomerGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomerIndex;

      return this.apiClient.callApi(
        '/user/customer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
