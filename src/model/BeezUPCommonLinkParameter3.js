/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BeezUPCommonLOVLink3', 'model/BeezUPCommonLinkParameterProperty3', 'model/BeezUPCommonParameterIn', 'model/BeezUPCommonParameterType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BeezUPCommonLOVLink3'), require('./BeezUPCommonLinkParameterProperty3'), require('./BeezUPCommonParameterIn'), require('./BeezUPCommonParameterType'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.BeezUPCommonLinkParameter3 = factory(root.BeezUpApi.ApiClient, root.BeezUpApi.BeezUPCommonLOVLink3, root.BeezUpApi.BeezUPCommonLinkParameterProperty3, root.BeezUpApi.BeezUPCommonParameterIn, root.BeezUpApi.BeezUPCommonParameterType);
  }
}(this, function(ApiClient, BeezUPCommonLOVLink3, BeezUPCommonLinkParameterProperty3, BeezUPCommonParameterIn, BeezUPCommonParameterType) {
  'use strict';




  /**
   * The BeezUPCommonLinkParameter3 model module.
   * @module model/BeezUPCommonLinkParameter3
   * @version 2.0
   */

  /**
   * Constructs a new <code>BeezUPCommonLinkParameter3</code>.
   * @alias module:model/BeezUPCommonLinkParameter3
   * @class
   * @param _in {module:model/BeezUPCommonParameterIn} 
   */
  var exports = function(_in) {
    var _this = this;




    _this['in'] = _in;






  };

  /**
   * Constructs a <code>BeezUPCommonLinkParameter3</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BeezUPCommonLinkParameter3} obj Optional instance to populate.
   * @return {module:model/BeezUPCommonLinkParameter3} The populated <code>BeezUPCommonLinkParameter3</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], Object);
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('in')) {
        obj['in'] = BeezUPCommonParameterIn.constructFromObject(data['in']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = BeezUPCommonParameterType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('lovLink')) {
        obj['lovLink'] = BeezUPCommonLOVLink3.constructFromObject(data['lovLink']);
      }
      if (data.hasOwnProperty('lovRequired')) {
        obj['lovRequired'] = ApiClient.convertToType(data['lovRequired'], 'Boolean');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('schema')) {
        obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
      }
      if (data.hasOwnProperty('properties')) {
        obj['properties'] = ApiClient.convertToType(data['properties'], {'String': BeezUPCommonLinkParameterProperty3});
      }
    }
    return obj;
  }

  /**
   * The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The value of the parameter. It can be an integer a string or an object.
   * @member {Object} value
   */
  exports.prototype['value'] = undefined;
  /**
   * @member {Boolean} required
   * @default false
   */
  exports.prototype['required'] = false;
  /**
   * @member {module:model/BeezUPCommonParameterIn} in
   */
  exports.prototype['in'] = undefined;
  /**
   * @member {module:model/BeezUPCommonParameterType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/BeezUPCommonLOVLink3} lovLink
   */
  exports.prototype['lovLink'] = undefined;
  /**
   * If true, you MUST indicate a value from the list of values otherwise it's a freetext
   * @member {Boolean} lovRequired
   */
  exports.prototype['lovRequired'] = undefined;
  /**
   * description of the parameter
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * schema of the parameter
   * @member {String} schema
   */
  exports.prototype['schema'] = undefined;
  /**
   * If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
   * @member {Object.<String, module:model/BeezUPCommonLinkParameterProperty3>} properties
   */
  exports.prototype['properties'] = undefined;



  return exports;
}));


