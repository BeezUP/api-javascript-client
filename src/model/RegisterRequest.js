/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.RegisterRequest = factory(root.BeezUpApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The RegisterRequest model module.
   * @module model/RegisterRequest
   * @version 2.0
   */

  /**
   * Constructs a new <code>RegisterRequest</code>.
   * @alias module:model/RegisterRequest
   * @class
   * @param email {String} Your email. We refuse disposable email.
   * @param password {String} The password you want to use for your new account. \\ The password length must be greater or equals to 6 and lower or equals to 128. \\ The password must contains at least one number and one special character 
   */
  var exports = function(email, password) {
    var _this = this;

    _this['email'] = email;
    _this['password'] = password;


  };

  /**
   * Constructs a <code>RegisterRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RegisterRequest} obj Optional instance to populate.
   * @return {module:model/RegisterRequest} The populated <code>RegisterRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('cultureName')) {
        obj['cultureName'] = ApiClient.convertToType(data['cultureName'], 'String');
      }
      if (data.hasOwnProperty('commercialOwnerUserId')) {
        obj['commercialOwnerUserId'] = ApiClient.convertToType(data['commercialOwnerUserId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Your email. We refuse disposable email.
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * The password you want to use for your new account. \\ The password length must be greater or equals to 6 and lower or equals to 128. \\ The password must contains at least one number and one special character 
   * @member {String} password
   */
  exports.prototype['password'] = undefined;
  /**
   * Can be null. Default: en-GB. The culture name you want to use. FYI. \\ The email activation will use this culture. 
   * @member {String} cultureName
   */
  exports.prototype['cultureName'] = undefined;
  /**
   * The user id of your commercial in BeezUP.
   * @member {String} commercialOwnerUserId
   */
  exports.prototype['commercialOwnerUserId'] = undefined;



  return exports;
}));


