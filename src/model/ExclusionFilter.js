/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BeezUPCommonChannelColumnId', 'model/ExclusionFilterName', 'model/ExclusionFilterOperatorName'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BeezUPCommonChannelColumnId'), require('./ExclusionFilterName'), require('./ExclusionFilterOperatorName'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.ExclusionFilter = factory(root.BeezUpApi.ApiClient, root.BeezUpApi.BeezUPCommonChannelColumnId, root.BeezUpApi.ExclusionFilterName, root.BeezUpApi.ExclusionFilterOperatorName);
  }
}(this, function(ApiClient, BeezUPCommonChannelColumnId, ExclusionFilterName, ExclusionFilterOperatorName) {
  'use strict';




  /**
   * The ExclusionFilter model module.
   * @module model/ExclusionFilter
   * @version 2.0
   */

  /**
   * Constructs a new <code>ExclusionFilter</code>.
   * The exclusion filter
   * @alias module:model/ExclusionFilter
   * @class
   * @param name {module:model/ExclusionFilterName} 
   * @param position {Number} The position of the exclusion filter
   * @param groupId {String} Indicate the filter's group. All filters in the same group means an \"AND\" operation in the filter group
   * @param positionInGroup {Number} Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.
   * @param channelColumnId {module:model/BeezUPCommonChannelColumnId} 
   * @param operatorName {module:model/ExclusionFilterOperatorName} 
   * @param enabled {Boolean} indicates if the filter is currently active.
   */
  var exports = function(name, position, groupId, positionInGroup, channelColumnId, operatorName, enabled) {
    var _this = this;

    _this['name'] = name;
    _this['position'] = position;
    _this['groupId'] = groupId;
    _this['positionInGroup'] = positionInGroup;
    _this['channelColumnId'] = channelColumnId;
    _this['operatorName'] = operatorName;

    _this['enabled'] = enabled;
  };

  /**
   * Constructs a <code>ExclusionFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExclusionFilter} obj Optional instance to populate.
   * @return {module:model/ExclusionFilter} The populated <code>ExclusionFilter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ExclusionFilterName.constructFromObject(data['name']);
      }
      if (data.hasOwnProperty('position')) {
        obj['position'] = ApiClient.convertToType(data['position'], 'Number');
      }
      if (data.hasOwnProperty('groupId')) {
        obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
      }
      if (data.hasOwnProperty('positionInGroup')) {
        obj['positionInGroup'] = ApiClient.convertToType(data['positionInGroup'], 'Number');
      }
      if (data.hasOwnProperty('channelColumnId')) {
        obj['channelColumnId'] = BeezUPCommonChannelColumnId.constructFromObject(data['channelColumnId']);
      }
      if (data.hasOwnProperty('operatorName')) {
        obj['operatorName'] = ExclusionFilterOperatorName.constructFromObject(data['operatorName']);
      }
      if (data.hasOwnProperty('value')) {
        obj['value'] = ApiClient.convertToType(data['value'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ExclusionFilterName} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The position of the exclusion filter
   * @member {Number} position
   */
  exports.prototype['position'] = undefined;
  /**
   * Indicate the filter's group. All filters in the same group means an \"AND\" operation in the filter group
   * @member {String} groupId
   */
  exports.prototype['groupId'] = undefined;
  /**
   * Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.
   * @member {Number} positionInGroup
   */
  exports.prototype['positionInGroup'] = undefined;
  /**
   * @member {module:model/BeezUPCommonChannelColumnId} channelColumnId
   */
  exports.prototype['channelColumnId'] = undefined;
  /**
   * @member {module:model/ExclusionFilterOperatorName} operatorName
   */
  exports.prototype['operatorName'] = undefined;
  /**
   * The value indicate by the user when the filter operation requires it.
   * @member {String} value
   */
  exports.prototype['value'] = undefined;
  /**
   * indicates if the filter is currently active.
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;



  return exports;
}));


