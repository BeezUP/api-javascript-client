/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CompressionFormatStrategy', 'model/Credential', 'model/DownloadCatalogStrategy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CompressionFormatStrategy'), require('./Credential'), require('./DownloadCatalogStrategy'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.InputFileFetchConfiguration = factory(root.BeezUpApi.ApiClient, root.BeezUpApi.CompressionFormatStrategy, root.BeezUpApi.Credential, root.BeezUpApi.DownloadCatalogStrategy);
  }
}(this, function(ApiClient, CompressionFormatStrategy, Credential, DownloadCatalogStrategy) {
  'use strict';




  /**
   * The InputFileFetchConfiguration model module.
   * @module model/InputFileFetchConfiguration
   * @version 2.0
   */

  /**
   * Constructs a new <code>InputFileFetchConfiguration</code>.
   * Describe the way to download the file
   * @alias module:model/InputFileFetchConfiguration
   * @class
   * @param uri {String} Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
   * @param downloadCatalogStrategy {module:model/DownloadCatalogStrategy} 
   */
  var exports = function(uri, downloadCatalogStrategy) {
    var _this = this;

    _this['uri'] = uri;

    _this['downloadCatalogStrategy'] = downloadCatalogStrategy;



  };

  /**
   * Constructs a <code>InputFileFetchConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InputFileFetchConfiguration} obj Optional instance to populate.
   * @return {module:model/InputFileFetchConfiguration} The populated <code>InputFileFetchConfiguration</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('uri')) {
        obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
      }
      if (data.hasOwnProperty('credential')) {
        obj['credential'] = Credential.constructFromObject(data['credential']);
      }
      if (data.hasOwnProperty('downloadCatalogStrategy')) {
        obj['downloadCatalogStrategy'] = DownloadCatalogStrategy.constructFromObject(data['downloadCatalogStrategy']);
      }
      if (data.hasOwnProperty('compressionFormatStrategy')) {
        obj['compressionFormatStrategy'] = CompressionFormatStrategy.constructFromObject(data['compressionFormatStrategy']);
      }
      if (data.hasOwnProperty('compressedRelativePath')) {
        obj['compressedRelativePath'] = ApiClient.convertToType(data['compressedRelativePath'], 'String');
      }
      if (data.hasOwnProperty('downloadTimeout')) {
        obj['downloadTimeout'] = ApiClient.convertToType(data['downloadTimeout'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
   * @member {String} uri
   */
  exports.prototype['uri'] = undefined;
  /**
   * @member {module:model/Credential} credential
   */
  exports.prototype['credential'] = undefined;
  /**
   * @member {module:model/DownloadCatalogStrategy} downloadCatalogStrategy
   */
  exports.prototype['downloadCatalogStrategy'] = undefined;
  /**
   * @member {module:model/CompressionFormatStrategy} compressionFormatStrategy
   */
  exports.prototype['compressionFormatStrategy'] = undefined;
  /**
   * Indicate the relative path in the compressed file
   * @member {String} compressedRelativePath
   */
  exports.prototype['compressedRelativePath'] = undefined;
  /**
   * Indicate the download time out in second
   * @member {Number} downloadTimeout
   * @default 30
   */
  exports.prototype['downloadTimeout'] = 30;



  return exports;
}));


