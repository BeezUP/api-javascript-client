/**
 * BeezUP API
 * This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EncryptedBlocklyExpression', 'model/EncryptedExpression', 'model/UserColumName'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EncryptedBlocklyExpression'), require('./EncryptedExpression'), require('./UserColumName'));
  } else {
    // Browser globals (root is window)
    if (!root.BeezUpApi) {
      root.BeezUpApi = {};
    }
    root.BeezUpApi.ChangeCustomColumnRequest = factory(root.BeezUpApi.ApiClient, root.BeezUpApi.EncryptedBlocklyExpression, root.BeezUpApi.EncryptedExpression, root.BeezUpApi.UserColumName);
  }
}(this, function(ApiClient, EncryptedBlocklyExpression, EncryptedExpression, UserColumName) {
  'use strict';




  /**
   * The ChangeCustomColumnRequest model module.
   * @module model/ChangeCustomColumnRequest
   * @version 2.0
   */

  /**
   * Constructs a new <code>ChangeCustomColumnRequest</code>.
   * The message request to change a custom column expression an user name
   * @alias module:model/ChangeCustomColumnRequest
   * @class
   * @param encryptedExpression {module:model/EncryptedExpression} 
   * @param encryptedBlocklyExpression {module:model/EncryptedBlocklyExpression} 
   * @param userColumName {module:model/UserColumName} 
   */
  var exports = function(encryptedExpression, encryptedBlocklyExpression, userColumName) {
    var _this = this;

    _this['encryptedExpression'] = encryptedExpression;
    _this['encryptedBlocklyExpression'] = encryptedBlocklyExpression;
    _this['userColumName'] = userColumName;
  };

  /**
   * Constructs a <code>ChangeCustomColumnRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChangeCustomColumnRequest} obj Optional instance to populate.
   * @return {module:model/ChangeCustomColumnRequest} The populated <code>ChangeCustomColumnRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('encryptedExpression')) {
        obj['encryptedExpression'] = EncryptedExpression.constructFromObject(data['encryptedExpression']);
      }
      if (data.hasOwnProperty('encryptedBlocklyExpression')) {
        obj['encryptedBlocklyExpression'] = EncryptedBlocklyExpression.constructFromObject(data['encryptedBlocklyExpression']);
      }
      if (data.hasOwnProperty('userColumName')) {
        obj['userColumName'] = UserColumName.constructFromObject(data['userColumName']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/EncryptedExpression} encryptedExpression
   */
  exports.prototype['encryptedExpression'] = undefined;
  /**
   * @member {module:model/EncryptedBlocklyExpression} encryptedBlocklyExpression
   */
  exports.prototype['encryptedBlocklyExpression'] = undefined;
  /**
   * @member {module:model/UserColumName} userColumName
   */
  exports.prototype['userColumName'] = undefined;



  return exports;
}));


